



Network Working Group                                        A. Davidson
Internet-Draft                                            Brave Software
Intended status: Informational                          A. Faz-Hernandez
Expires: 3 January 2022                                      N. Sullivan
                                                               C.A. Wood
                                                              Cloudflare
                                                             2 July 2021


   Oblivious Pseudorandom Functions (OPRFs) using Prime-Order Groups
                      draft-irtf-cfrg-voprf-latest

Abstract

   An Oblivious Pseudorandom Function (OPRF) is a two-party protocol for
   computing the output of a PRF.  One party (the server) holds the PRF
   secret key, and the other (the client) holds the PRF input.  The
   'obliviousness' property ensures that the server does not learn
   anything about the client's input during the evaluation.  The client
   should also not learn anything about the server's secret PRF key.
   Optionally, OPRFs can also satisfy a notion 'verifiability' (VOPRF).
   In this setting, the client can verify that the server's output is
   indeed the result of evaluating the underlying PRF with just a public
   key.  This document specifies OPRF and VOPRF constructions
   instantiated within prime-order groups, including elliptic curves.

Discussion Venues

   This note is to be removed before publishing as an RFC.

   Source for this draft and an issue tracker can be found at
   https://github.com/cfrg/draft-irtf-cfrg-voprf.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 3 January 2022.

Copyright Notice

   Copyright (c) 2021 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Simplified BSD License text
   as described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Simplified BSD License.

Table of Contents

   1.  Introduction
     1.1.  Change log
     1.2.  Terminology
     1.3.  Requirements
   2.  Preliminaries
     2.1.  Prime-Order Group Dependency
     2.2.  Other Conventions
   3.  OPRF Protocol
     3.1.  Overview
     3.2.  Context Setup
     3.3.  Data Types
     3.4.  Context APIs
       3.4.1.  Server Context
       3.4.2.  VerifiableServerContext
       3.4.3.  Client Context
       3.4.4.  VerifiableClientContext
   4.  OPRF Protocol With Metadata
     4.1.  Overview
     4.2.  Context Setup
     4.3.  Data Types
     4.4.  Context APIs
       4.4.1.  Server Context Metadata Mode
       4.4.2.  VerifiableServerContextMetadata
       4.4.3.  Client Context Metadata Mode
       4.4.4.  VerifiableClientContextMetadata
   5.  Domain Separation
   6.  Ciphersuites
     6.1.  OPRF(ristretto255, SHA-512)
     6.2.  OPRF(decaf448, SHAKE-256)
     6.3.  OPRF(P-256, SHA-256)
     6.4.  OPRF(P-384, SHA-512)
     6.5.  OPRF(P-521, SHA-512)
   7.  API Considerations
   8.  Security Considerations
     8.1.  Security Properties
     8.2.  Cryptographic Security
       8.2.1.  Computational Hardness Assumptions
       8.2.2.  Protocol Security
       8.2.3.  Q-Strong-DH Oracle
       8.2.4.  Implications for Ciphersuite Choices
     8.3.  Element and Scalar Validation
     8.4.  Hashing to Group
     8.5.  Blinding Considerations
     8.6.  Timing Leaks
     8.7.  Key Rotation
       8.7.1.  Parameter Commitments
   9.  Acknowledgements
   10. References
     10.1.  Normative References
     10.2.  Informative References
   Appendix A.  Test Vectors
     A.1.  OPRF(ristretto255, SHA-512)
       A.1.1.  Base Mode
       A.1.2.  Verifiable Mode
     A.2.  OPRF(decaf448, SHAKE-256)
       A.2.1.  Base Mode
       A.2.2.  Verifiable Mode
     A.3.  OPRF(P-256, SHA-256)
       A.3.1.  Base Mode
       A.3.2.  Verifiable Mode
     A.4.  OPRF(P-384, SHA-512)
       A.4.1.  Base Mode
       A.4.2.  Verifiable Mode
     A.5.  OPRF(P-521, SHA-512)
       A.5.1.  Base Mode
       A.5.2.  Verifiable Mode
   Authors' Addresses

1.  Introduction

   A pseudorandom function (PRF) F(k, x) is an efficiently computable
   function taking a private key k and a value x as input.  This
   function is pseudorandom if the keyed function K(_) = F(K, _) is
   indistinguishable from a randomly sampled function acting on the same
   domain and range as K().  An oblivious PRF (OPRF) is a two-party
   protocol between a server and a client, where the server holds a PRF
   key k and the client holds some input x.  The protocol allows both
   parties to cooperate in computing F(k, x) such that: the client
   learns F(k, x) without learning anything about k; and the server does
   not learn anything about x or F(k, x).  A Verifiable OPRF (VOPRF) is
   an OPRF wherein the server can prove to the client that F(k, x) was
   computed using the key k.

   The usage of OPRFs has been demonstrated in constructing a number of
   applications: password-protected secret sharing schemes [JKKX16];
   privacy-preserving password stores [SJKS17]; and password-
   authenticated key exchange or PAKE [I-D.irtf-cfrg-opaque].  A VOPRF
   is necessary in some applications, e.g., the Privacy Pass protocol
   [I-D.davidson-pp-protocol], wherein this VOPRF is used to generate
   one-time authentication tokens to bypass CAPTCHA challenges.  VOPRFs
   have also been used for password-protected secret sharing schemes
   e.g.  [JKK14].

   This document introduces an OPRF protocol built in prime-order
   groups, applying to finite fields of prime-order and also elliptic
   curve (EC) groups.  The protocol has the option of being extended to
   a VOPRF with the addition of a NIZK proof for proving discrete log
   equality relations.  This proof demonstrates correctness of the
   computation, using a known public key that serves as a commitment to
   the server's secret key.  The document describes the protocol, the
   public-facing API, and its security properties.

   In some applications, there is the need to include an amount of
   public metadata into the OPRF protocol.  Partially-Oblivious PRFs
   (POPRF) [TCRSTW21] are used to extend the OPRF functionality to
   include this public input (or metadata tag) t in the PRF evaluation.

1.1.  Change log

   draft-06 (https://tools.ietf.org/html/draft-irtf-cfrg-voprf-06):

   *  Specify of group element and scalar serialization.

   *  Remove info parameter from the protocol API and update domain
      separation guidance.

   *  Fold Unblind function into Finalize.

   *  Optimize ComputeComposites for servers (using knowledge of the
      private key).

   *  Specify deterministic key generation method.

   *  Update test vectors.

   *  Apply various editorial changes.

   draft-05 (https://tools.ietf.org/html/draft-irtf-cfrg-voprf-05):

   *  Move to ristretto255 and decaf448 ciphersuites.

   *  Clean up ciphersuite definitions.

   *  Pin domain separation tag construction to draft version.

   *  Move key generation outside of context construction functions.

   *  Editorial changes.

   draft-04 (https://tools.ietf.org/html/draft-irtf-cfrg-voprf-04):

   *  Introduce Client and Server contexts for controlling verifiability
      and required functionality.

   *  Condense API.

   *  Remove batching from standard functionality (included as an
      extension)

   *  Add Curve25519 and P-256 ciphersuites for applications that
      prevent strong-DH oracle attacks.

   *  Provide explicit prime-order group API and instantiation advice
      for each ciphersuite.

   *  Proof-of-concept implementation in sage.

   *  Remove privacy considerations advice as this depends on
      applications.

   draft-03 (https://tools.ietf.org/html/draft-irtf-cfrg-voprf-03):

   *  Certify public key during VerifiableFinalize.

   *  Remove protocol integration advice.

   *  Add text discussing how to perform domain separation.

   *  Drop OPRF_/VOPRF_ prefix from algorithm names.

   *  Make prime-order group assumption explicit.

   *  Changes to algorithms accepting batched inputs.

   *  Changes to construction of batched DLEQ proofs.

   *  Updated ciphersuites to be consistent with hash-to-curve and added
      OPRF specific ciphersuites.

   draft-02 (https://tools.ietf.org/html/draft-irtf-cfrg-voprf-02):

   *  Added section discussing cryptographic security and static DH
      oracles.

   *  Updated batched proof algorithms.

   draft-01 (https://tools.ietf.org/html/draft-irtf-cfrg-voprf-01):

   *  Updated ciphersuites to be in line with
      https://tools.ietf.org/html/draft-irtf-cfrg-hash-to-curve-04.

   *  Made some necessary modular reductions more explicit.

1.2.  Terminology

   The following terms are used throughout this document.

   *  PRF: Pseudorandom Function.

   *  OPRF: Oblivious Pseudorandom Function.

   *  VOPRF: Verifiable Oblivious Pseudorandom Function.

   *  Client: Protocol initiator.  Learns pseudorandom function
      evaluation as the output of the protocol.

   *  Server: Computes the pseudorandom function over a secret key.
      Learns nothing about the client's input.

   *  NIZK: Non-interactive zero knowledge.

   *  DLEQ: Discrete Logarithm Equality.

1.3.  Requirements

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

2.  Preliminaries

   The (V)OPRF protocol in this document has two primary dependencies:

   *  "GG": A prime-order group implementing the API described below in
      Section 2.1, with base point defined in the corresponding
      reference for each group.  (See Section 6 for these base points.)

   *  "Hash": A cryptographic hash function that is indifferentiable
      from a Random Oracle, whose output length is Nh bytes long.

   Section 6 specifies ciphersuites as combinations of "GG" and "Hash".

2.1.  Prime-Order Group Dependency

   In this document, we assume the construction of an additive, prime-
   order group "GG" for performing all mathematical operations.  Such
   groups are uniquely determined by the choice of the prime "p" that
   defines the order of the group.  We use "GF(p)" to represent the
   finite field of order "p".  For the purpose of understanding and
   implementing this document, we take "GF(p)" to be equal to the set of
   integers defined by "{0, 1, ..., p-1}".

   The fundamental group operation is addition "+" with identity element
   "I".  For any elements "A" and "B" of the group "GG", "A + B = B + A"
   is also a member of "GG".  Also, for any "A" in "GG", there exists an
   element "-A" such that "A + (-A) = (-A) + A = I".  Scalar
   multiplication is equivalent to the repeated application of the group
   operation on an element A with itself "r-1" times, this is denoted as
   "r*A = A + ... + A".  For any element "A", "p*A=I".  We denote "G" as
   the fixed generator of the group.  Scalar base multiplication is
   equivalent to the repeated application of the group operation "G"
   with itself "r-1" times, this is denoted as "ScalarBaseMult(r)".  The
   set of scalars corresponds to "GF(p)".

   We now detail a number of member functions that can be invoked on a
   prime-order group "GG".

   *  Order(): Outputs the order of "GG" (i.e. "p").

   *  Identity(): Outputs the identity element of the group (i.e.  "I").

   *  HashToGroup(x): A member function of "GG" that deterministically
      maps an array of bytes "x" to an element of "GG".  The map must
      ensure that, for any adversary receiving "R = HashToGroup(x)", it
      is computationally difficult to reverse the mapping.  Examples of
      hash to group functions satisfying this property are described for
      prime-order (sub)groups of elliptic curves, see
      [I-D.irtf-cfrg-hash-to-curve].

   *  HashToScalar(x): A member function of "GG" that deterministically
      maps an array of bytes "x" to an element in GF(p).  A recommended
      method for its implementation is instantiating the hash to field
      function, defined in [I-D.irtf-cfrg-hash-to-curve] setting the
      target field to GF(p).

   *  RandomScalar(): A member function of "GG" that chooses at random a
      non-zero element in GF(p).

   *  SerializeElement(A): A member function of "GG" that maps a group
      element "A" to a unique byte array "buf" of fixed length "Ne".

   *  DeserializeElement(buf): A member function of "GG" that maps a
      byte array "buf" to a group element "A", or fails if the input is
      not a valid byte representation of an element.  This function can
      raise a DeserializeError if deserialization fails or "A" is the
      identity element of the group; see Section 8.3.

   *  SerializeScalar(s): A member function of "GG" that maps a scalar
      element "s" to a unique byte array "buf" of fixed length "Ns".

   *  DeserializeScalar(buf): A member function of "GG" that maps a byte
      array "buf" to a scalar "s", or fails if the input is not a valid
      byte representation of a scalar.  This function can raise a
      DeserializeError if deserialization fails; see Section 8.3.

   Two functions can be used for generating a (V)OPRF key pair ("skS",
   "pkS") where "skS" is a non-zero integer less than "p" and "pkS =
   ScalarBaseMult(skS)": "GenerateKeyPair" and "DeriveKeyPair".
   "GenerateKeyPair" is a randomized function that outputs a fresh key
   pair ("skS", "pkS") upon ever invocation.  "DeriveKeyPair" is a
   deterministic function that generates private key "skS" from a random
   byte string "seed" that SHOULD have at least "Ns" bytes of entropy,
   and then computes "pkS = ScalarBaseMult(skS)".

   It is convenient in cryptographic applications to instantiate such
   prime-order groups using elliptic curves, such as those detailed in
   [SEC2].  For some choices of elliptic curves (e.g. those detailed in
   [RFC7748], which require accounting for cofactors) there are some
   implementation issues that introduce inherent discrepancies between
   standard prime-order groups and the elliptic curve instantiation.  In
   this document, all algorithms that we detail assume that the group is
   a prime-order group, and this MUST be upheld by any implementer.
   That is, any curve instantiation should be written such that any
   discrepancies with a prime-order group instantiation are removed.
   See Section 6 for advice corresponding to the implementation of this
   interface for specific definitions of elliptic curves.

2.2.  Other Conventions

   *  For any object "x", we write "len(x)" to denote its length in
      bytes.

   *  For two byte arrays "x" and "y", write "x || y" to denote their
      concatenation.

   *  I2OSP and OS2IP: Convert a byte array to and from a non-negative
      integer as described in [RFC8017].  Note that these functions
      operate on byte arrays in big-endian byte order.

   All algorithm descriptions are written in a Python-like pseudocode.
   We also use the "CT_EQUAL(a, b)" function to represent constant-time
   byte-wise equality between byte arrays "a" and "b".  This function
   returns "true" if "a" and "b" are equal, and "false" otherwise.

3.  OPRF Protocol

   In this section, we define two OPRF variants: a base mode and
   verifiable mode.  In the base mode, a client and server interact to
   compute y = F(skS, x), where x is the client's input, skS is the
   server's private key, and y is the OPRF output.  The client learns y
   and the server learns nothing.  In the verifiable mode, the client
   also gets proof that the server used skS in computing the function.

   To achieve verifiability, as in the original work of [JKK14], we
   provide a zero-knowledge proof that the key provided as input by the
   server in the "Evaluate" function is the same key as it used to
   produce their public key.  As an example of the nature of attacks
   that this prevents, this ensures that the server uses the same
   private key for computing the VOPRF output and does not attempt to
   "tag" individual servers with select keys.  This proof must not
   reveal the server's long-term private key to the client.

   In both modes, a public input (or metadata tag) t can be added to the
   PRF evaluation by using a PO-PRF: a client and server interact to
   compute y = F(skS, x, t), where x is the client's input, skS is the
   server's private key, t is a public metadata input and y is the OPRF
   output.  The client learns y and the server learns nothing.

   The following one-byte values distinguish between these two modes:

                        +================+=======+
                        | Mode           | Value |
                        +================+=======+
                        | modeBase       | 0x00  |
                        +----------------+-------+
                        | modeVerifiable | 0x01  |
                        +----------------+-------+

                                 Table 1

3.1.  Overview

   Both participants agree on the mode and a choice of ciphersuite that
   is used before the protocol exchange.  Once established, the base
   mode of the protocol runs to compute "output = F(skS, input, tag)" as
   follows (note that both the client or server can optionally add the
   public metadata input cTag or sTag):

    Client(input, cTag)                             Server(skS, sTag)
  -------------------------------------------------------------------
    blind, blindedElement, cTag = Blind(input, cTag)

                        blindedElement, cTag
                        ---------->

    evaluatedElement, proof, stag = Evaluate(skS, blindedElement, sTag, cTag)

                      evaluatedElement, sTag
                        <----------

    output = Finalize(input, blind, evaluatedElement, blindedElement, cTag, sTag)

   In "Blind" the client generates a token and blinding data optionally
   associated with the appropriate tag.  The server computes the (V)OPRF
   evaluation in "Evaluation" over the client's blinded token, the
   optionally associated client tag and the optionally associated server
   tag.  In "Finalize" the client unblinds the server response and
   produces a byte array corresponding to the output of the OPRF
   protocol.

   In the verifiable mode of the protocol, the server additionally
   computes a proof in Evaluate.  The client verifies this proof using
   the server's expected public key before completing the protocol and
   producing the protocol output.

3.2.  Context Setup

   Both modes of the OPRF involve an offline setup phase.  In this
   phase, both the client and server create a context used for executing
   the online phase of the protocol.  The key pair ("skS", "pkS") should
   be generated by calling either "GenerateKeyPair" or "DeriveKeyPair".

   The base mode setup functions for creating client and server contexts
   are below:

def SetupBaseServer(suite, skS):
  contextString = "VOPRF06-" || I2OSP(modeBase, 1) || I2OSP(suite.ID, 2)
  return ServerContext(contextString, skS)

def SetupBaseClient(suite):
  contextString = "VOPRF06-" || I2OSP(modeBase, 1) || I2OSP(suite.ID, 2)
  return ClientContext(contextString)

   The verifiable mode setup functions for creating client and server
   contexts are below:

def SetupVerifiableServer(suite, skS, pkS):
  contextString = "VOPRF06-" || I2OSP(modeVerifiable, 1) || I2OSP(suite.ID, 2)
  return VerifiableServerContext(contextString, skS)

def SetupVerifiableClient(suite, pkS):
  contextString = "VOPRF06-" || I2OSP(modeVerifiable, 1) || I2OSP(suite.ID, 2)
  return VerifiableClientContext(contextString, pkS)

   Each setup function takes a ciphersuite from the list defined in
   Section 6.  Each ciphersuite has a two-byte field ID used to identify
   the suite.

   [[RFC editor: please change "VOPRF06" to "RFCXXXX", where XXXX is the
   final number, here and elsewhere before publication.]]

3.3.  Data Types

   The following is a list of data structures that are defined for
   providing inputs and outputs for each of the context interfaces
   defined in Section 3.4.  Data structure description uses TLS notation
   (see [RFC8446], Section 3).

   This document uses the types "Element" and "Scalar" to denote
   elements of the group "GG" and its underlying scalar field "GF(p)",
   respectively.  For notational clarity, "PublicKey" is an item of type
   "Element" and "PrivateKey" is an item of type "Scalar".
   "SerializedElement" and "SerializedScalar" are serialized
   representations of "Element" and "Scalar" types of length "Ne" and
   "Ns", respectively; see Section 2.1.  "ClientInput" is an opaque byte
   string of arbitrary length.  "Proof" is a sequence of two
   "SerializedScalar" elements, as shown below.

   SerializedScalar Proof[2];

   "Tag" is an opaque byte string of arbitrary length representing the
   public metadata input optionally used by either Client and/or Server.

3.4.  Context APIs

   In this section, we detail the APIs available on the client and
   server (V)OPRF contexts.  Each API has the following implicit
   parameters:

   *  GG, a prime-order group implementing the API described in
      Section 2.1.

   *  contextString, a domain separation tag taken from the client or
      server context.

3.4.1.  Server Context

   The ServerContext encapsulates the context string constructed during
   setup and the (V)OPRF key pair.  It has three functions, "Evaluate",
   "FullEvaluate" and "VerifyFinalize" described below.  "Evaluate"
   takes serialized representations of blinded group elements from the
   client as inputs and optionally the public metadata input as
   determined by the server and/or the public metadata input as sent by
   the client .

   "FullEvaluate" takes ClientInput values, and it is useful for
   applications that need to compute the whole OPRF protocol on the
   server side only.

   "VerifyFinalize" takes ClientInput values and their corresponding
   output digests from "Finalize" as input, and returns true if the
   inputs match the outputs.

   Note that "VerifyFinalize" and "FullEvaluate" are not used in the
   main OPRF protocol.  They are exposed as an API for building higher-
   level protocols.

3.4.1.1.  Evaluate

Input:

  PrivateKey skS
  SerializedElement blindedElement
  Tag serverMetadataTag
  Tag clientMetadataTag

Output:

  SerializedElement evaluatedElement
  Tag serverMetadataTag

Errors: DeserializeError

def Evaluate(skS, blindedElement, serverMetadataTag, clientMetadataTag):
  if serverMetadataTag != "" || clientMetadataTag != ""
    R = GG.DeserializeElement(blindedElement)
    metadata = "Metadata-" || contextString || I2OSP(len(serverMetadataTag), 2) || serverMetadataTag || I2OSP(len(clientMetadataTag), 2) || clientMetadataTag
    tag = GG.HashToScalar(metadata)
    t = skS + tag
    Z = (tag^(-1)) * R
    return evaluatedElement, serverMetadataTag

  R = GG.DeserializeElement(blindedElement)
  Z = skS * R
  evaluatedElement = GG.SerializeElement(Z)

  return evaluatedElement, ""

3.4.1.2.  FullEvaluate

   Input:

     PrivateKey skS
     ClientInput input

   Output:

     opaque output[Nh]

   def FullEvaluate(skS, input):
     P = GG.HashToGroup(input)
     T = skS * P
     issuedElement = GG.SerializeElement(T)

     finalizeDST = "Finalize-" || contextString
     hashInput = I2OSP(len(input), 2) || input ||
                 I2OSP(len(issuedElement), 2) || issuedElement ||
                 I2OSP(len(finalizeDST), 2) || finalizeDST

     return Hash(hashInput)

3.4.1.3.  VerifyFinalize

Input:

  PrivateKey skS
  ClientInput input
  opaque output[Nh]
  Tag serverMetadataTag
  Tag clientMetadataTag

Output:

  boolean valid

def VerifyFinalize(skS, input, output):
  T = GG.HashToGroup(input)
  element = GG.SerializeElement(T)
  issuedElement = Evaluate(skS, [element], serverMetadataTag, clientMetadataTag)
  E = GG.SerializeElement(issuedElement)

  finalizeDST = "Finalize-" || contextString
  hashInput = I2OSP(len(input), 2) || input ||
              I2OSP(len(serverMetadataTag), 2) || serverMetadataTag ||
              I2OSP(len(clientMetadataTag), 2) || clientMetadataTag ||
              I2OSP(len(E), 2) || E ||
              I2OSP(len(finalizeDST), 2) || finalizeDST

  digest = Hash(hashInput)

  return CT_EQUAL(digest, output)

3.4.2.  VerifiableServerContext

   The VerifiableServerContext extends the base ServerContext with an
   augmented "Evaluate()" function.  This function produces a proof that
   "skS" was used in computing the result.  It makes use of the helper
   functions "GenerateProof" and "ComputeComposites", described below.

3.4.2.1.  Evaluate

Input:

  PrivateKey skS
  PublicKey pkS
  Tag serverMetadataTag
  Tag clientMetadataTag SerializedElement blindedElement

Output:

  SerializedElement evaluatedElement
  Proof proof
  Tag serverMetadataTag

Errors: DeserializeError

def Evaluate(skS, pkS, blindedElement, serverMetadataTag, clientMetadataTag):
  if serverMetadataTag != "" || clientMetadataTag != ""
    R = GG.DeserializeElement(blindedElement)
    metadata = "Metadata-" || contextString || I2OSP(len(serverMetadataTag), 2) || serverMetadataTag || I2OSP(len(clientMetadataTag), 2) || clientMetadataTag
    tag = GG.HashToScalar(metadata)
    t = skS + tag
    Z = (tag^(-1)) * R
    proof = GenerateProof(skS, t, pkS, R, Z)
    return evaluatedElement, proof, serverMetadataTag

  R = GG.DeserializeElement(blindedElement)
  Z = skS * R
  evaluatedElement = GG.SerializeElement(Z)

  proof = GenerateProof(skS, pkS, R, Z, "")

  return evaluatedElement, proof, ""

   The helper functions "GenerateProof" and "ComputeComposites" are
   defined below.

3.4.2.2.  GenerateProof

   Input:

     Scalar k
     Scalar t
     Element B
     Element C
     Element D

   Output:

     Proof proof

   def GenerateProof(k, t, B, C, D)
     Cs = [C]
     Ds = [D]
     if t != nil
       a = ComputeCompositesFast(t, B, Cs, Ds)
     else
       a = ComputeCompositesFast(k, B, Cs, Ds)

     r = GG.RandomScalar()
     M = a[0]
     Z = a[1]
     uu = ""

     if t != nil
       U = ScalarBaseMult(t)
       uu = GG.SerializeElement(U)

     t2 = ScalarBaseMult(r)
     t3 = r * M

     Bm = GG.SerializeElement(B)
     a0 = GG.SerializeElement(M)
     a1 = GG.SerializeElement(Z)
     a2 = GG.SerializeElement(t2)
     a3 = GG.SerializeElement(t3)

     challengeDST = "Challenge-" || contextString
     h2Input = I2OSP(len(uu), 2) || uu ||
               I2OSP(len(Bm), 2) || Bm ||
               I2OSP(len(a0), 2) || a0 ||
               I2OSP(len(a1), 2) || a1 ||
               I2OSP(len(a2), 2) || a2 ||
               I2OSP(len(a3), 2) || a3 ||
               I2OSP(len(challengeDST), 2) || challengeDST

     c = GG.HashToScalar(h2Input)

     if t != nil
       s = (r - c * t) mod p
     else
       s = (r - c * k) mod p

     proof = [GG.SerializeScalar(c), GG.SerializeScalar(s)]

     return proof

3.4.2.2.1.  Batching inputs

   Unlike other functions, "ComputeComposites" takes lists of inputs,
   rather than a single input.  Applications can take advantage of this
   functionality by invoking "GenerateProof" on batches of inputs to
   produce a combined, constant-size proof.  (In the pseudocode above,
   the single inputs "blindedElement" and "evaluatedElement" are passed
   as one-item lists to "ComputeComposites".)

   In particular, servers can produce a single, constant-sized proof for
   N client inputs sent in a single request, rather than one proof per
   client input.  This optimization benefits clients and servers since
   it amortizes the cost of proof generation and bandwidth across
   multiple requests.

3.4.2.2.2.  Fresh Randomness

   We note here that it is essential that a different "r" value is used
   for every invocation.  If this is not done, then this may leak "skS"
   as is possible in Schnorr or (EC)DSA scenarios where fresh randomness
   is not used.

3.4.2.3.  ComputeComposites

   The definition of "ComputeComposites" is given below.  This function
   is used both on generation and verification of the proof.

   Input:

     Element B
     Element Cs[m]
     Element Ds[m]

   Output:

     Element composites[2]

   def ComputeComposites(B, Cs, Ds):
     Bm = GG.SerializeElement(B)
     seedDST = "Seed-" || contextString
     compositeDST = "Composite-" || contextString

     h1Input = I2OSP(len(Bm), 2) || Bm ||
               I2OSP(len(seedDST), 2) || seedDST
     seed = Hash(h1Input)

     M = GG.Identity()
     Z = GG.Identity()
     for i = 0 to m-1:
       Ci = GG.SerializeElement(Cs[i])
       Di = GG.SerializeElement(Ds[i])
       h2Input = I2OSP(len(seed), 2) || seed || I2OSP(i, 2) ||
                 I2OSP(len(Ci), 2) || Ci ||
                 I2OSP(len(Di), 2) || Di ||
                 I2OSP(len(compositeDST), 2) || compositeDST
       di = GG.HashToScalar(h2Input)
       M = di * Cs[i] + M
       Z = di * Ds[i] + Z

    return [M, Z]

   If the private key is known, as is the case for the server, this
   function can be optimized as shown in "ComputeCompositesFast" below.

   Input:

     Scalar k
     Element B
     Element Cs[m]
     Element Ds[m]

   Output:

     Element composites[2]

   def ComputeCompositesFast(k, B, Cs, Ds):
     Bm = GG.SerializeElement(B)
     seedDST = "Seed-" || contextString
     compositeDST = "Composite-" || contextString

     h1Input = I2OSP(len(Bm), 2) || Bm ||
               I2OSP(len(seedDST), 2) || seedDST
     seed = Hash(h1Input)

     M = GG.Identity()
     for i = 0 to m-1:
       Ci = GG.SerializeElement(Cs[i])
       Di = GG.SerializeElement(Ds[i])
       h2Input = I2OSP(len(seed), 2) || seed || I2OSP(i, 2) ||
                 I2OSP(len(Ci), 2) || Ci ||
                 I2OSP(len(Di), 2) || Di ||
                 I2OSP(len(compositeDST), 2) || compositeDST
       di = GG.HashToScalar(h2Input)
       M = di * Cs[i] + M

     Z = k * M

    return [M, Z]

3.4.3.  Client Context

   The ClientContext encapsulates the context string constructed during
   setup.  It has two functions, "Blind()" and "Finalize()", as
   described below.  It also has an internal function, "Unblind()",
   which is used by "Finalize".  The implementation of these functions
   varies depending on the mode.

3.4.3.1.  Blind

   In this mode, blinding is done multiplicatively.  Under certain
   application circumstances, the more optimal additive blinding
   mechanism described in Section 3.4.4.2 can be used.  See Section 8.5
   for more details.

   "Blind" is implemented as follows (nota that the metadataTag, taken
   as an input, is an optional value.  If no metadataTag is provided by
   the client, an empty string is sent as output).

   Input:

     ClientInput input
     Tag metadataTag

   Output:

     Scalar blind
     SerializedElement blindedElement
     Tag metadataTag

   def Blind(input, metadataTag):
     blind = GG.RandomScalar()
     P = GG.HashToGroup(input)
     blindedElement = GG.SerializeElement(blind * P)

     if !metadataTag
       metadataTag = ""

     return blind, blindedElement, metadataTag

   The inverse "Unblind" is implemented as follows.

   Input:

     Scalar blind
     SerializedElement evaluatedElement

   Output:

     SerializedElement unblindedElement

   Errors: DeserializeError

   def Unblind(blind, evaluatedElement, ...):
     Z = GG.DeserializeElement(evaluatedElement)
     N = (blind^(-1)) * Z
     unblindedElement = GG.SerializeElement(N)

     return unblindedElement

3.4.3.2.  Finalize

   "Finalize" depends on the internal "Unblind" function.  In this mode,
   "Finalize" and does not include all inputs listed in Section 3.1.
   These additional inputs are only useful for the verifiable mode,
   described in Section 3.4.4.3.

  Input:

    ClientInput input
    Scalar blind
    SerializedElement evaluatedElement
    Tag serverMetadataTag
    Tag clientMetadataTag

  Output:

    opaque output[Nh]

  def Finalize(input, blind, evaluatedElement):
    unblindedElement = Unblind(blind, evaluatedElement)

    finalizeDST = "Finalize-" || contextString
    hashInput = I2OSP(len(input), 2) || input ||
                I2OSP(len(serverMetadataTag), 2) || serverMetadataTag ||
                I2OSP(len(clientMetadataTag), 2) || clientMetadataTag ||
                I2OSP(len(unblindedElement), 2) || unblindedElement ||
                I2OSP(len(finalizeDST), 2) || finalizeDST
    return Hash(hashInput)

3.4.4.  VerifiableClientContext

   The VerifiableClientContext extends the base ClientContext with the
   desired server public key "pkS" with an augmented "Unblind()"
   function.  This function verifies an evaluation proof using "pkS".
   It makes use of the helper function "ComputeComposites" described
   above.  It has one helper function, "VerifyProof()", defined below.

3.4.4.1.  VerifyProof

   This algorithm outputs a boolean "verified" which indicates whether
   the proof inside of the evaluation verifies correctly, or not.

   Input:

     Element B
     Element C
     Element D
     Proof proof

   Output:

     boolean verified

   def VerifyProof(B, C, D, proof):
     Cs = [C]
     Ds = [D]

     a = ComputeComposites(B, Cs, Ds)
     c = GG.DeserializeScalar(proof[0])
     s = GG.DeserializeScalar(proof[1])

     M = a[0]
     Z = a[1]
     t2 = ((ScalarBaseMult(s)) + (c * B))
     t3 = ((s * M) + (c * Z))

     Bm = GG.SerializeElement(B)
     a0 = GG.SerializeElement(M)
     a1 = GG.SerializeElement(Z)
     a2 = GG.SerializeElement(t2)
     a3 = GG.SerializeElement(t3)

     challengeDST = "Challenge-" || contextString
     h2Input = I2OSP(len(Bm), 2) || Bm ||
               I2OSP(len(a0), 2) || a0 ||
               I2OSP(len(a1), 2) || a1 ||
               I2OSP(len(a2), 2) || a2 ||
               I2OSP(len(a3), 2) || a3 ||
               I2OSP(len(challengeDST), 2) || challengeDST

     expectedC  = GG.HashToScalar(h2Input)

     return CT_EQUAL(expectedC, c)

3.4.4.2.  Verifiable Blind

   In this mode, where the server public key is available for proof
   verification, blinding is done additively.  This variant is named
   "VerifiableBlind" and "VerifiableUnblind".  It takes two inputs: the
   client input and a blinded version of the group generator.  The
   latter is computed using a function called "VerifiablePreprocess",
   also described below.

   "VerifiableBlind" is implemented as follows.

   Input:

     ClientInput input
     Element blindedGenerator

   Output:

     SerializedElement blindedElement

   def VerifiableBlind(input, blindedGenerator):
     P = GG.HashToGroup(input)
     blindedElement = GG.SerializeElement(P + blindedGenerator)

     return blindedElement

   The inverse "VerifiableUnblind" is implemented as follows.  This
   function can raise an exception if element deserialization or proof
   verification fails.

Input:

  Element blindedPublicKey
  SerializedElement evaluatedElement
  SerializedElement blindedElement
  Element pkS
  Scalar proof

Output:

  SerializedElement unblindedElement

Errors: DeserializeError, VerifyError

def VerifiableUnblind(blindedPublicKey, evaluatedElement, blindedElement, pkS, proof):
  Z = GG.DeserializeElement(evaluatedElement)
  R = GG.DeserializeElement(blindedElement)
  if VerifyProof(pkS, R, Z, proof) == false:
    raise VerifyError

  N := Z - blindedPublicKey
  unblindedElement = GG.SerializeElement(N)

  return unblindedElement

   The internal "VerifiablePreprocess" function computes a blind and
   uses it to compute a corresponding blinded version of the group
   generator and server public key.  This function can be used to pre-
   compute tables of values for future invocations of the protocol, or
   it can be computed only when needed for a single invocation of the
   protocol.

   Input:

     Element pkS

   Output:

     Element blindedGenerator
     Element blindedPublicKey
     Scalar blind

   def VerifiablePreprocess(pkS):
     blind = GG.RandomScalar()
     blindedGenerator = ScalarBaseMult(blind)
     blindedPublicKey = pkS * blind

     return blindedGenerator, blindedPublicKey, blind

3.4.4.3.  Verifiable Finalize

Input:

  ClientInput input
  Element blindedPublicKey
  SerializedElement evaluatedElement
  SerializedElement blindedElement
  Element pkS
  Scalar proof

Output:

  opaque output[Nh]

def Finalize(input, blindedPublicKey, evaluatedElement, blindedElement, pkS, proof):
  unblindedElement = VerifiableUnblind(blindedPublicKey, evaluatedElement, blindedElement, pkS, proof)

  finalizeDST = "Finalize-" || contextString
  hashInput = I2OSP(len(input), 2) || input ||
              I2OSP(len(unblindedElement), 2) || unblindedElement ||
              I2OSP(len(finalizeDST), 2) || finalizeDST
  return Hash(hashInput)

4.  OPRF Protocol With Metadata

   In some applications, there is the need to include an amount of
   public metadata into the OPRF protocol.  Partially-Oblivious PRFs
   (POPRF), first introduced in [ECS15] and defined in [TCRSTW21],
   extend the OPRF functionality to include this public input (or
   metadata tag) t in the PRF evaluation.

   A partially-oblivious PRF (POPRF) is a two-party protocol between a
   server and a client, where the server holds a PRF key k, a public
   metadata input t; the client holds some input x and the same public
   metadata input t (referred as tag).

   The protocol allows both parties to cooperate in computing F(k, t, x)
   such that: the client learns F(k, t, x) without learning anything
   about k; and the server does not learn anything about x or F(k, t,
   x).  A Verifiable POPRF (VPOPRF) is a POPRF wherein the server can
   prove to the client that F(k, t, x) was computed using the key k.

   In this section, we define two POPRF variants: a base mode and
   verifiable mode.  In the base mode, a client and server interact to
   compute y = F(skS, t, x), where x is the client's input and t is the
   public metadata input, skS is the server's private key, and y is the
   POPRF output.  The client learns y and the server learns nothing; but
   they both know the public metadata input.  In the verifiable mode,
   the client also gets proof that the server used skS in computing the
   function.

   To achieve verifiability, as in the original work of [TCRSTW21], we
   provide a zero-knowledge proof that the key provided as input by the
   server in the "Evaluate" function is the same key as it used to
   produce their public key.

   The following one-byte values distinguish between these two modes:

                    +========================+=======+
                    | Mode                   | Value |
                    +========================+=======+
                    | modeMetadataBase       | 0x02  |
                    +------------------------+-------+
                    | modeMetadataVerifiable | 0x03  |
                    +------------------------+-------+

                                 Table 2

4.1.  Overview

   Both participants agree on the mode and a choice of ciphersuite that
   is used before the protocol exchange.  Once established, the base
   mode of the protocol runs to compute "output = F(skS, tag, input)" as
   follows:

     Client(input, tag)                             Server(skS, tag)
    ------------------------------------------------------------------------------
    blind, blindedElement = BlindMetadata(input, tag)

                       blindedElement, tag
                        ---------->

    evaluatedElement, proof = EvaluateMetadata(skS, blindedElement, tag)

                      evaluatedElement
                        <----------

    output = FinalizeMetadata(input, blind, tag, evaluatedElement, blindedElement)

   In "BlindMetadata" the client generates a token and blinding data
   associated with the appropriate tag.  The server computes the
   (V)POPRF evaluation in "EvaluateMetadata" over the client's blinded
   token and tag.  In "FinalizeMetadata" the client unblinds the server
   response and produces a byte array corresponding to the output of the
   (V)POPRF protocol.

   In the verifiable mode of the protocol, the server additionally
   computes a proof in "EvaluateMetadata".  The client verifies this
   proof using the server's expected public key before completing the
   protocol and producing the protocol output.

   TODO: note that the client or the server could be the ones providing
   the metadata tag

4.2.  Context Setup

   Both modes of the OPRF with metadata involve an offline setup phase.
   In this phase, both the client and server create a context used for
   executing the online phase of the protocol.  The key pair ("skS",
   "pkS") should be generated by calling either "GenerateKeyPair" or
   "DeriveKeyPair".

   The base metadata mode setup functions for creating client and server
   contexts are below:

def SetupBaseServer(suite, skS):
  contextString = "VOPRF06-" || I2OSP(modeMetadataBase, 1) || I2OSP(suite.ID, 2)
  return ServerContext(contextString, skS)

def SetupBaseClient(suite):
  contextString = "VOPRF06-" || I2OSP(modeMetadataBase, 1) || I2OSP(suite.ID, 2)
  return ClientContext(contextString)

   The verifiable metadata mode setup functions for creating client and
   server contexts are below:

def SetupVerifiableServer(suite, skS, pkS):
  contextString = "VOPRF06-" || I2OSP(modeMetadataVerifiable, 1) || I2OSP(suite.ID, 2)
  return VerifiableServerContext(contextString, skS)

def SetupVerifiableClient(suite, pkS):
  contextString = "VOPRF06-" || I2OSP(modeMetadataVerifiable, 1) || I2OSP(suite.ID, 2)
  return VerifiableClientContext(contextString, pkS)

   Each setup function takes a ciphersuite from the list defined in
   Section 6.  Each ciphersuite has a two-byte field ID used to identify
   the suite.

   [[RFC editor: please change "VOPRF06" to "RFCXXXX", where XXXX is the
   final number, here and elsewhere before publication.]]

4.3.  Data Types

   The OPRF Protocol With Metadata uses the same data types as the OPRF
   protocol, with the addition of:

   "Tag" is an opaque byte string of arbitrary length representing the
   public metadata input used by both Client and Server.

4.4.  Context APIs

   In this section, we detail the APIs available on the client and
   server (V)POPRF contexts.  Each API has the following implicit
   parameters:

   *  GG, a prime-order group implementing the API described in
      Section 2.1.

   *  contextString, a domain separation tag taken from the client or
      server context.

4.4.1.  Server Context Metadata Mode

   The ServerContext encapsulates the context string constructed during
   setup and the (V)POPRF key pair.  It has one function:
   "EvaluateMetadata".

4.4.1.1.  EvaluateMetadata

Input:

  PrivateKey skS
  SerializedElement blindedElement
  Tag metadataTag

Output:

  SerializedElement evaluatedElement

Errors: DeserializeError

def EvaluateMetadata(skS, blindedElement, metadataTag):
  R = GG.DeserializeElement(blindedElement)
  metadata = "Metadata-" || contextString || I2OSP(len(metadataTag), 2) || metadataTag
  tag = GG.HashToScalar(metadata)
  t = skS + tag
  Z = (tag^(-1)) * R
  evaluatedElement = GG.SerializeElement(Z)

  return evaluatedElement

4.4.2.  VerifiableServerContextMetadata

   The VerifiableServerContextMetadata extends the base
   ServerContextMetadata with an augmented "EvaluateMetadata()"
   function.  This function produces a proof that "skS" was used in
   computing the result.  It makes use of the helper functions
   "GenerateProofMetadata" and "ComputeComposites", described below.
   Note that in you can only batch elements related to one tag.

4.4.2.1.  EvaluateMetadata

Input:

  PrivateKey skS
  PublicKey pkS
  SerializedElement blindedElement
  Tag metadataTag

Output:

  SerializedElement evaluatedElement
  Proof proof

Errors: DeserializeError

def EvaluateMetadata(skS, pkS, blindedElement):
  R = GG.DeserializeElement(blindedElement)
  metadata = "Metadata-" || contextString || I2OSP(len(metadataTag), 2) || metadataTag
  tag = GG.HashToScalar(metadata)
  t = skS + tag
  Z = (tag^(-1)) * R

  proof = GenerateProofMetadata(t, pkS, Z, R)

  return evaluatedElement, proof

   The helper functions "GenerateProofMetadata" is described below.  We
   reuse the same "ComputeCompositesFast" function.

4.4.2.2.  GenerateProofMetadata

   Input:

     Scalar t
     Element A
     Element B
     Element C

   Output:

     Proof proof

   def GenerateProofMetadata(t, A, B, C)
     Bs = [B]
     Cs = [C]
     a = ComputeCompositesFast(t, A, Bs, Cs)

     r = GG.RandomScalar()
     M = a[0]
     Z = a[1]

     U = ScalarBaseMult(t)
     sU = ScalarBaseMult(r)
     sW = r * M

     G = GG.SerializeElement(GG.Generator())
     aa = GG.SerializeElement(A)
     uu = GG.SerializeElement(U)
     bb = GG.SerializeElement(M)
     cc = GG.SerializeElement(Z)
     su = GG.SerializeElement(sU)
     sw = GG.SerializeElement(sW)

     proofDST = "Challenge-" || contextString
     hashInput = I2OSP(len(G), 2) || G ||
                 I2OSP(len(aa), 2) || aa ||
                 I2OSP(len(uu), 2) || uu ||
                 I2OSP(len(bb), 2) || bb ||
                 I2OSP(len(cc), 2) || cc ||
                 I2OSP(len(su), 2) || su ||
                 I2OSP(len(sw), 2) || sw ||
                 I2OSP(len(proofDST), 2) || proofDST

     c = GG.HashToScalar(hashInput)

     y = c * t mod p
     z = r - y mod p

     proof = [GG.SerializeScalar(c), GG.SerializeScalar(z)]

     return proof

4.4.3.  Client Context Metadata Mode

   The ClientContextMetadata encapsulates the context string constructed
   during setup.  It has two functions, "BlindMetadata()" and
   "FinalizeMetadata()", as described below.  It also has an internal
   function, "UnblindMetadata()", which is used by "FinalizeMetadata".
   The implementation of these functions varies depending on the
   metadata mode.

4.4.3.1.  BlindMetadata

   In this mode, blinding is done multiplicatively.

   "BlindMetadata" is implemented as follows.

   Input:

     ClientInput input
     Tag metadataTag

   Output:

     Scalar blind
     SerializedElement blindedElement
     Tag metadataTag

   def Blind(input, metadata_tag):
     blind = GG.RandomScalar()
     P = GG.HashToGroup(input)
     blindedElement = GG.SerializeElement(blind * P)

     return blind, blindedElement, metadataTag

   The inverse "UnblindMetadata" is implemented as follows.

   Input:

     Scalar blind
     SerializedElement evaluatedElement

   Output:

     SerializedElement unblindedElement

   Errors: DeserializeError

   def UnblindMetadata(blind, evaluatedElement, ...):
     Z = GG.DeserializeElement(evaluatedElement)
     N = (blind^(-1)) * Z
     unblindedElement = GG.SerializeElement(N)

     return unblindedElement

4.4.3.2.  FinalizeMetadata

   "FinalizeMetadata" depends on the internal "UnblindMetadata"
   function.  In this mode, "FinalizeMetadata" does not include all
   inputs listed in Section 3.1.  Those additional inputs are only
   useful for the verifiable mode, described in Section 4.4.4.3.

   Input:

     ClientInput input
     Scalar blind
     Tag metadataTag
     SerializedElement evaluatedElement

   Output:

     opaque output[Nh]

   def FinalizeMetadata(input, blind, metadataTag, evaluatedElement):
     unblindedElement = UnblindMetadata(blind, evaluatedElement)

     finalizeDST = "Finalize-" || contextString
     hashInput = I2OSP(len(input), 2) || input ||
                 I2OSP(len(metadataTag), 2) || metadataTag ||
                 I2OSP(len(unblindedElement), 2) || unblindedElement ||
                 I2OSP(len(finalizeDST), 2) || finalizeDST
     return Hash(hashInput)

4.4.4.  VerifiableClientContextMetadata

   The VerifiableClientContextMetadata extends the base
   ClientContextMetadata with the desired server public key "pkS" with
   an augmented "UnblindMetadat()" function.  This function verifies an
   evaluation proof using "pkS".  It makes use of the helper function
   "ComputeComposites" described above.  It has one helper function,
   "VerifyProofMetadata()", defined below.

4.4.4.1.  VerifyProofMetadata

   This algorithm outputs a boolean "verifiedWithMetadata" which
   indicates whether the proof inside of the evaluation associated with
   the "tag" verifies correctly, or not.

   Input:

     Scalar t
     Element A
     Element B
     Element C
     Proof proof

   Output:

     boolean verifiedWithMetadata

   def VerifyProofMetadata(t, A, B, C, proof):
     metadata = "Metadata-" || contextString || I2OSP(len(t), 2) || t
     tag = GG.HashToScalar(metadata)
     uT = ScalarBaseMult(t)
     U = uT + A

     Bs = [B]
     Cs = [C]
     a = ComputeComposites(A, Bs, Cs)
     z = GG.DeserializeScalar(proof[0])
     c = GG.DeserializeScalar(proof[1])

     M = a[0]
     Z = a[1]

     gZ = ScalarBaseMult(z)
     sU = gZ + (U * c)
     sW = (M * z) + (Z * c)

     G = GG.SerializeElement(GG.Generator())
     aa = GG.SerializeElement(A)
     uu = GG.SerializeElement(U)
     bb = GG.SerializeElement(M)
     cc = GG.SerializeElement(Z)
     su = GG.SerializeElement(sU)
     sw = GG.SerializeElement(sW)

     challengeDST = "Challenge-" || contextString
     hashInput = I2OSP(len(G), 2) || G ||
                 I2OSP(len(aa), 2) || aa ||
                 I2OSP(len(uu), 2) || uu ||
                 I2OSP(len(bb), 2) || bb ||
                 I2OSP(len(cc), 2) || cc ||
                 I2OSP(len(su), 2) || su ||
                 I2OSP(len(sw), 2) || sw ||
                 I2OSP(len(challengeDST), 2) || challengeDST

     expectedC  = GG.HashToScalar(hInput)

     return CT_EQUAL(expectedC, c)

4.4.4.2.  Verifiable Unblind Metadata

   In this mode, a "VerifiableUnblindMetadata" is used for the
   "FinalizeMetadata" function.  This function can raise an exception if
   element deserialization or proof verification fails.

   Input:

     Scalar blind
     Element pkS
     SerializedElement evaluatedElement
     Scalar proof

   Output:

     SerializedElement unblindedElement

   Errors: DeserializeError

   def UnblindMetadata(blind, evaluatedElement, ...):
     Z = GG.DeserializeElement(evaluatedElement)
     R = (blind^(-1)) * Z
     unblindedElement = GG.SerializeElement(R)

     if VerifyProofMetadata(t, pkS, R, Z, proof) == false:
       raise VerifyError

     return unblindedElement

4.4.4.3.  Verifiable Finalize Metadata

   "FinalizeMetadata" works the same way as in the non-verifiable mode
   but depends on the augmented internal verifiable "UnblindMetadata"
   function.

Input:

  ClientInput input
  Scalar blind
  SerializedElement evaluatedElement
  Element pkS
  Scalar proof
  Tag metadataTag

Output:

  opaque output[Nh]

def FinalizeMetadata(input, blind, evaluatedElement):
  unblindedElement = UnblindMetadata(blind, pkS, evaluatedElement, proof)

  finalizeDST = "Finalize-" || contextString
  hashInput = I2OSP(len(input), 2) || input ||
              I2OSP(len(metadataTag), 2) || metadataTag ||
              I2OSP(len(unblindedElement), 2) || unblindedElement ||
              I2OSP(len(finalizeDST), 2) || finalizeDST
  return Hash(hashInput)

5.  Domain Separation

   Applications SHOULD construct input to the protocol to provide domain
   separation.  Any system which has multiple (V)OPRF applications
   should distinguish client inputs to ensure the OPRF results are
   separate.  Guidance for constructing info can be found in
   [I-D.irtf-cfrg-hash-to-curve]; Section 3.1.

6.  Ciphersuites

   A ciphersuite (also referred to as 'suite' in this document) for the
   protocol wraps the functionality required for the protocol to take
   place.  This ciphersuite should be available to both the client and
   server, and agreement on the specific instantiation is assumed
   throughout.  A ciphersuite contains instantiations of the following
   functionalities:

   *  "GG": A prime-order group exposing the API detailed in
      Section 2.1, with base point defined in the corresponding
      reference for each group.  Each group also specifies HashToGroup,
      HashToScalar, and serialization functionalities.  For HashToGroup,
      the domain separation tag (DST) is constructed in accordance with
      the recommendations in [I-D.irtf-cfrg-hash-to-curve], Section 3.1.
      For HashToScalar, each group specifies an integer order that is
      used in reducing integer values to a member of the corresponding
      scalar field.

   *  "Hash": A cryptographic hash function that is indifferentiable
      from a Random Oracle, whose output length is Nh bytes long.

   This section specifies ciphersuites with supported groups and hash
   functions.  For each ciphersuite, contextString is that which is
   computed in the Setup functions.

   Applications should take caution in using ciphersuites targeting
   P-256 and ristretto255.  See Section 8.2 for related discussion.

6.1.  OPRF(ristretto255, SHA-512)

   *  Group: ristretto255 [RISTRETTO]

      -  HashToGroup(): Use hash_to_ristretto255
         [I-D.irtf-cfrg-hash-to-curve] with DST = "HashToGroup-" ||
         contextString, and "expand_message" = "expand_message_xmd"
         using SHA-512.

      -  HashToScalar(): Compute "uniform_bytes" using "expand_message"
         = "expand_message_xmd", DST = "HashToScalar-" || contextString,
         and output length 64, interpret "uniform_bytes" as a 512-bit
         integer in little-endian order, and reduce the integer modulo
         "Order()".

      -  Serialization: Both group elements and scalars are encoded in
         Ne = Ns = 32 bytes.  For group elements, use the 'Encode' and
         'Decode' functions from [RISTRETTO].  For scalars, ensure they
         are fully reduced modulo "Order()" and in little-endian order.

   *  Hash: SHA-512, and Nh = 64.

   *  ID: 0x0001

6.2.  OPRF(decaf448, SHAKE-256)

   *  Group: decaf448 [RISTRETTO]

      -  HashToGroup(): Use hash_to_decaf448
         [I-D.irtf-cfrg-hash-to-curve] with DST = "HashToGroup-" ||
         contextString, and "expand_message" = "expand_message_xof"
         using SHAKE-256.

      -  HashToScalar(): Compute "uniform_bytes" using "expand_message"
         = "expand_message_xof", DST = "HashToScalar-" || contextString,
         and output length 64, interpret "uniform_bytes" as a 512-bit
         integer in little-endian order, and reduce the integer modulo
         "Order()".

      -  Serialization: Both group elements and scalars are encoded in
         Ne = Ns = 56 bytes.  For group elements, use the 'Encode' and
         'Decode' functions from [RISTRETTO].  For scalars, ensure they
         are fully reduced modulo "Order()" and in little-endian order.

   *  Hash: SHAKE-256, and Nh = 64.

   *  ID: 0x0002

6.3.  OPRF(P-256, SHA-256)

   *  Group: P-256 (secp256r1) [x9.62]

      -  HashToGroup(): Use hash_to_curve with suite P256_XMD:SHA-
         256_SSWU_RO_ [I-D.irtf-cfrg-hash-to-curve] and DST =
         "HashToGroup-" || contextString.

      -  HashToScalar(): Use hash_to_field from
         [I-D.irtf-cfrg-hash-to-curve] using L = 48,
         "expand_message_xmd" with SHA-256, DST = "HashToScalar-" ||
         contextString, and prime modulus equal to "Order()".

      -  Serialization: Elements are serialized as Ne = 33 byte strings
         using compressed point encoding for the curve [SEC1].  Scalars
         are serialized as Ns = 32 byte strings by fully reducing the
         value modulo "Order()" and in big-endian order.

   *  Hash: SHA-256, and Nh = 32.

   *  ID: 0x0003

6.4.  OPRF(P-384, SHA-512)

   *  Group: P-384 (secp384r1) [x9.62]

      -  HashToGroup(): Use hash_to_curve with suite P384_XMD:SHA-
         512_SSWU_RO_ [I-D.irtf-cfrg-hash-to-curve] and DST =
         "HashToGroup-" || contextString.

      -  HashToScalar(): Use hash_to_field from
         [I-D.irtf-cfrg-hash-to-curve] using L = 72,
         "expand_message_xmd" with SHA-512, DST = "HashToScalar-" ||
         contextString, and prime modulus equal to "Order()".

      -  Serialization: Elements are serialized as Ne = 49 byte strings
         using compressed point encoding for the curve [SEC1].  Scalars
         are serialized as Ns = 48 byte strings by fully reducing the
         value modulo "Order()" and in big-endian order.

   *  Hash: SHA-512, and Nh = 64.

   *  ID: 0x0004

6.5.  OPRF(P-521, SHA-512)

   *  Group: P-521 (secp521r1) [x9.62]

      -  HashToGroup(): Use hash_to_curve with suite P521_XMD:SHA-
         512_SSWU_RO_ [I-D.irtf-cfrg-hash-to-curve] and DST =
         "HashToGroup-" || contextString.

      -  HashToScalar(): Use hash_to_field from
         [I-D.irtf-cfrg-hash-to-curve] using L = 98,
         "expand_message_xmd" with SHA-512, DST = "HashToScalar-" ||
         contextString, and prime modulus equal to "Order()".

      -  Serialization: Elements are serialized as Ne = 67 byte strings
         using compressed point encoding for the curve [SEC1].  Scalars
         are serialized as Ns = 66 byte strings by fully reducing the
         value modulo "Order()" and in big-endian order.

   *  Hash: SHA-512, and Nh = 64.

   *  ID: 0x0005

7.  API Considerations

   Some VOPRF APIs specified in this document are fallible.  For
   example, "Finalize" and "Evaluate" can fail if any element received
   from the peer fails deserialization.  The explicit errors generated
   throughout this specification, along with the conditions that lead to
   each error, are as follows:

   *  "VerifyError": VOPRF proof verification failed; Section 3.4.4.2.

   *  "DeserializeError": Group element or scalar deserialization
      failure; Section 2.1.

   The errors in this document are meant as a guide to implementors.
   They are not an exhaustive list of all the errors an implementation
   might emit.  For example, implementations might run out of memory and
   return a corresponding error.

8.  Security Considerations

   This section discusses the cryptographic security of our protocol,
   along with some suggestions and trade-offs that arise from the
   implementation of an OPRF.

8.1.  Security Properties

   The security properties of an OPRF protocol with functionality y =
   F(k, x) include those of a standard PRF.  Specifically:

   *  Pseudorandomness: F is pseudorandom if the output y = F(k,x) on
      any input x is indistinguishable from uniformly sampling any
      element in F's range, for a random sampling of k.

   In other words, consider an adversary that picks inputs x from the
   domain of F and evaluates F on (k,x) (without knowledge of randomly
   sampled k).  Then the output distribution F(k,x) is indistinguishable
   from the output distribution of a randomly chosen function with the
   same domain and range.

   A consequence of showing that a function is pseudorandom, is that it
   is necessarily non-malleable (i.e. we cannot compute a new evaluation
   of F from an existing evaluation).  A genuinely random function will
   be non-malleable with high probability, and so a pseudorandom
   function must be non-malleable to maintain indistinguishability.

   An OPRF protocol must also satisfy the following property:

   *  Oblivious: The server must learn nothing about the client's input
      or the output of the function.  In addition, the client must learn
      nothing about the server's private key.

   Essentially, obliviousness tells us that, even if the server learns
   the client's input x at some point in the future, then the server
   will not be able to link any particular OPRF evaluation to x.  This
   property is also known as unlinkability [DGSTV18].

   Optionally, for any protocol that satisfies the above properties,
   there is an additional security property:

   *  Verifiable: The client must only complete execution of the
      protocol if it can successfully assert that the OPRF output it
      computes is correct.  This is taken with respect to the OPRF key
      held by the server.

   Any OPRF that satisfies the 'verifiable' security property is known
   as a verifiable OPRF, or VOPRF for short.  In practice, the notion of
   verifiability requires that the server commits to the key before the
   actual protocol execution takes place.  Then the client verifies that
   the server has used the key in the protocol using this commitment.
   In the following, we may also refer to this commitment as a public
   key.

8.2.  Cryptographic Security

   Below, we discuss the cryptographic security of the (V)OPRF protocol
   from Section 3, relative to the necessary cryptographic assumptions
   that need to be made.

8.2.1.  Computational Hardness Assumptions

   Each assumption states that the problems specified below are
   computationally difficult to solve in relation to a particular choice
   of security parameter "sp".

   Let GG = GG(sp) be a group with prime-order p, and let GF(p) be a
   finite field of order p.

8.2.1.1.  Discrete-log (DL) Problem

   Given G, a generator of GG, and H = hG for some h in GF(p); output h.

8.2.1.2.  Decisional Diffie-Hellman (DDH) Problem

   Sample uniformly at random d in {0,1}. Given (G, aG, bG, C), where

   *  G is a generator of GG;

   *  a,b are elements of GF(p);

   *  if d == 0: C = abG; else: C is sampled uniformly at random from
      GG.

   Output d' == d.

8.2.2.  Protocol Security

   Our OPRF construction is based on the VOPRF construction known as
   2HashDH-NIZK given by [JKK14]; essentially without providing zero-
   knowledge proofs that verify that the output is correct.  Our VOPRF
   construction is identical to the [JKK14] construction, except that we
   can optionally perform multiple VOPRF evaluations in one go, whilst
   only constructing one NIZK proof object.  This is enabled using an
   established batching technique.

   Consequently, the cryptographic security of our construction is based
   on the assumption that the One-More Gap DH is computationally
   difficult to solve.

   The (N,Q)-One-More Gap DH (OMDH) problem asks the following.

       Given:
       - G, k * G, and (G_1, ... , G_N), all elements of GG;
       - oracle access to an OPRF functionality using the key k;
       - oracle access to DDH solvers.

       Find Q+1 pairs of the form below:

       (G_{j_s}, k * G_{j_s})

       where the following conditions hold:
         - s is a number between 1 and Q+1;
         - j_s is a number between 1 and N for each s;
         - Q is the number of allowed queries.

   The original paper [JKK14] gives a security proof that the 2HashDH-
   NIZK construction satisfies the security guarantees of a VOPRF
   protocol Section 8.1 under the OMDH assumption in the universal
   composability (UC) security model.

8.2.3.  Q-Strong-DH Oracle

   A side-effect of our OPRF design is that it allows instantiation of a
   oracle for constructing Q-strong-DH (Q-sDH) samples.  The Q-Strong-DH
   problem asks the following.

       Given G1, G2, h*G2, (h^2)*G2, ..., (h^Q)*G2; for G1 and G2
       generators of GG.

       Output ( (1/(k+c))*G1, c ) where c is an element of GF(p)

   The assumption that this problem is hard was first introduced in
   [BB04].  Since then, there have been a number of cryptanalytic
   studies that have reduced the security of the assumption below that
   implied by the group instantiation (for example, [BG04] and
   [Cheon06]).  In summary, the attacks reduce the security of the group
   instantiation by log_2(Q) bits.

   As an example, suppose that a group instantiation is used that
   provides 128 bits of security against discrete log cryptanalysis.
   Then an adversary with access to a Q-sDH oracle and makes Q=2^20
   queries can reduce the security of the instantiation by log_2(2^20) =
   20 bits.

   Notice that it is easy to instantiate a Q-sDH oracle using the OPRF
   functionality that we provide.  A client can just submit sequential
   queries of the form (G, k * G, (k^2)G, ..., (k^(Q-1))G), where each
   query is the output of the previous interaction.  This means that any
   client that submits Q queries to the OPRF can use the aforementioned
   attacks to reduce the security of the group instantiation by log_2(Q)
   bits.

   Recall that from a malicious client's perspective, the adversary wins
   if they can distinguish the OPRF interaction from a protocol that
   computes the ideal functionality provided by the PRF.

8.2.4.  Implications for Ciphersuite Choices

   The OPRF instantiations that we recommend in this document are
   informed by the cryptanalytic discussion above.  In particular,
   choosing elliptic curves configurations that describe 128-bit group
   instantiations would appear to in fact instantiate an OPRF with
   128-log_2(Q) bits of security.

   In most cases, it would require an informed and persistent attacker
   to launch a highly expensive attack to reduce security to anything
   much below 100 bits of security.  We see this possibility as
   something that may result in problems in the future.  For
   applications that cannot tolerate discrete logarithm security of
   lower than 128 bits, we recommend only implementing ciphersuites with
   IDs: 0x0002, 0x0004, and 0x0005.

8.3.  Element and Scalar Validation

   The DeserializeElement function recovers a group element from an
   arbitrary byte array.  This function validates that the element is a
   proper member of the group and is not the identity element, and
   returns an error if either condition is not met.

   For P-256, P-384, and P-521 ciphersuites, this function performs
   partial public-key validation as defined in Section 5.6.2.3.4 of
   [keyagreement].  This includes checking that the coordinates are in
   the correct range, that the point is on the curve, and that the point
   is not the point at infinity.  If these checks fail, deserialization
   returns an error.

   For ristretto255 and decaf448, elements are deserialized by invoking
   the Decode function from [RISTRETTO], Section 4.3.1 and [RISTRETTO],
   respectively, which returns false if the element is invalid.  If this
   function returns false, deserialization returns an error.

   The DeserializeScalar function recovers a scalar field element from
   an arbitrary byte array.  Like DeserializeElement, this function
   validates that the element is a member of the scalar field and
   returns an error if this condition is not met.

   For P-256, P-384, and P-521 ciphersuites, this function ensures that
   the input, when treated as a big-endian integer, is a value between 0
   and "Order()".  For ristretto255 and decaf448, this function ensures
   that the input, when treated as a little-endian integer, is a valud
   between 0 and "Order()".

8.4.  Hashing to Group

   A critical requirement of implementing the prime-order group using
   elliptic curves is a method to instantiate the function
   "GG.HashToGroup", that maps inputs to group elements.  In the
   elliptic curve setting, this deterministically maps inputs x (as byte
   arrays) to uniformly chosen points on the curve.

   In the security proof of the construction Hash is modeled as a random
   oracle.  This implies that any instantiation of "GG.HashToGroup" must
   be pre-image and collision resistant.  In Section 6 we give
   instantiations of this functionality based on the functions described
   in [I-D.irtf-cfrg-hash-to-curve].  Consequently, any OPRF
   implementation must adhere to the implementation and security
   considerations discussed in [I-D.irtf-cfrg-hash-to-curve] when
   instantiating the function.

8.5.  Blinding Considerations

   This document makes use of two types of blinding variants:
   multiplicative and additive.  The advantage of additive blinding is
   that it allows the client to pre-process tables of blinded scalar
   multiplications for the group generator and server public key.  This
   can provide a computational efficiency advantage (due to the fact
   that a fixed-base multiplication can be calculated faster than a
   variable-base multiplication).  Pre-processing also reduces the
   amount of computation that needs to be done in the online exchange.

   However, the choice of blinding mechanism has security implications.
   [JKX21] analyze the security properties of both blinding mechanisms
   used in this document.  The results can be summarized as follows:

   *  Multiplicative blinding is safe for all applications.

   *  Additive blinding is possibly unsafe, unless one of the following
      conditions are met:

      -  The client has a certified copy of the server public key (as is
         the case in the verifiable mode);

      -  The client input has high entropy; and

      -  The client mixes the public key into the OPRF evaluation.

   To avoid security issues with the base mode, where some of the above
   conditions may not be met, this specification RECOMMENDS use of
   multiplicative blinding.  This is because it is not known if the
   server public key is available or if the client input has high
   entropy.  Applications wherein either of these conditions are true
   MAY use additive blinding.

   The verifiable mode always makes use of the more efficient additive
   blinding variant, as the public key is always available for verifying
   the proof.

8.6.  Timing Leaks

   To ensure no information is leaked during protocol execution, all
   operations that use secret data MUST run in constant time.
   Operations that SHOULD run in constant time include all prime-order
   group operations and proof-specific operations ("GenerateProof()" and
   "VerifyProof()").

8.7.  Key Rotation

   Since the server's key is critical to security, the longer it is
   exposed by performing (V)OPRF operations on client inputs, the longer
   it is possible that the key can be compromised.  For example, if the
   key is kept in circulation for a long period of time, then it also
   allows the clients to make enough queries to launch more powerful
   variants of the Q-sDH attacks from Section 8.2.3.

   To combat attacks of this nature, regular key rotation should be
   employed on the server-side.  A suitable key-cycle for a key used to
   compute (V)OPRF evaluations would be between one week and six months.

8.7.1.  Parameter Commitments

   For some applications, it may be desirable for the server to bind
   tokens to certain parameters, e.g., protocol versions, ciphersuites,
   etc.  To accomplish this, the server should use a distinct scalar for
   each parameter combination.  Upon redemption of a token T from the
   client, the server can later verify that T was generated using the
   scalar associated with the corresponding parameters.

9.  Acknowledgements

   This document resulted from the work of the Privacy Pass team
   [PrivacyPass].  The authors would also like to acknowledge helpful
   conversations with Hugo Krawczyk.  Eli-Shaoul Khedouri provided
   additional review and comments on key consistency.  Daniel Bourdrez,
   Tatiana Bradley, Sofia Celi, Frank Denis, and Bas Westerbaan also
   provided helpful input and contributions to the document.

10.  References

10.1.  Normative References

   [BB04]     "Short Signatures Without Random Oracles",
              <http://ai.stanford.edu/~xb/eurocrypt04a/bbsigs.pdf>.

   [BG04]     "The Static Diffie-Hellman Problem",
              <https://eprint.iacr.org/2004/306>.

   [Cheon06]  "Security Analysis of the Strong Diffie-Hellman Problem",
              <https://www.iacr.org/archive/
              eurocrypt2006/40040001/40040001.pdf>.

   [DGSTV18]  "Privacy Pass, Bypassing Internet Challenges Anonymously",
              <https://www.degruyter.com/view/j/popets.2018.2018.issue-
              3/popets-2018-0026/popets-2018-0026.xml>.

   [ECS15]    "The pythia PRF service",
              <https://eprint.iacr.org/2015/644.pdf>.

   [I-D.davidson-pp-protocol]
              Davidson, A., "Privacy Pass: The Protocol", Work in
              Progress, Internet-Draft, draft-davidson-pp-protocol-01,
              13 July 2020, <https://datatracker.ietf.org/doc/html/
              draft-davidson-pp-protocol-01.txt>.

   [I-D.irtf-cfrg-hash-to-curve]
              Faz-Hernandez, A., Scott, S., Sullivan, N., Wahby, R. S.,
              and C. A. Wood, "Hashing to Elliptic Curves", Work in
              Progress, Internet-Draft, draft-irtf-cfrg-hash-to-curve-
              11, 13 April 2021, <https://datatracker.ietf.org/doc/html/
              draft-irtf-cfrg-hash-to-curve-11.txt>.

   [I-D.irtf-cfrg-opaque]
              Krawczyk, H., Bourdrez, D., Lewi, K., and C. A. Wood, "The
              OPAQUE Asymmetric PAKE Protocol", Work in Progress,
              Internet-Draft, draft-irtf-cfrg-opaque-05, 7 June 2021,
              <https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-
              opaque-05.txt>.

   [JKK14]    "Round-Optimal Password-Protected Secret Sharing and
              T-PAKE in the Password-Only model",
              <https://eprint.iacr.org/2014/650>.

   [JKKX16]   "Highly-Efficient and Composable Password-Protected Secret
              Sharing (Or, How to Protect Your Bitcoin Wallet Online)",
              <https://eprint.iacr.org/2016/144>.

   [PrivacyPass]
              "Privacy Pass",
              <https://github.com/privacypass/challenge-bypass-server>.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://datatracker.ietf.org/doc/html/rfc2119>.

   [RFC7748]  Langley, A., Hamburg, M., and S. Turner, "Elliptic Curves
              for Security", RFC 7748, DOI 10.17487/RFC7748, January
              2016, <https://datatracker.ietf.org/doc/html/rfc7748>.

   [RFC8017]  Moriarty, K., Ed., Kaliski, B., Jonsson, J., and A. Rusch,
              "PKCS #1: RSA Cryptography Specifications Version 2.2",
              RFC 8017, DOI 10.17487/RFC8017, November 2016,
              <https://datatracker.ietf.org/doc/html/rfc8017>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://datatracker.ietf.org/doc/html/rfc8174>.

   [RISTRETTO]
              Valence, H. D., Grigg, J., Tankersley, G., Valsorda, F.,
              Lovecruft, I., and M. Hamburg, "The ristretto255 and
              decaf448 Groups", Work in Progress, Internet-Draft, draft-
              irtf-cfrg-ristretto255-decaf448-00, 5 October 2020,
              <https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-
              ristretto255-decaf448-00.txt>.

   [SEC1]     Standards for Efficient Cryptography Group (SECG), ., "SEC
              1: Elliptic Curve Cryptography",
              <https://www.secg.org/sec1-v2.pdf>.

   [SEC2]     Standards for Efficient Cryptography Group (SECG), ., "SEC
              2: Recommended Elliptic Curve Domain Parameters",
              <http://www.secg.org/sec2-v2.pdf>.

   [SJKS17]   "SPHINX, A Password Store that Perfectly Hides from
              Itself", <https://eprint.iacr.org/2018/695>.

   [TCRSTW21] "A Fast and Simple Partially Oblivious PRF, with
              Applications", <https://eprint.iacr.org/2021/864>.

   [x9.62]    ANSI, "Public Key Cryptography for the Financial Services
              Industry: the Elliptic Curve Digital Signature Algorithm
              (ECDSA)", ANSI X9.62-1998, September 1998.

10.2.  Informative References

   [JKX21]    Jarecki, S., Krawczyk, H., and J. Xu, "On the (In)Security
              of the Diffie-Hellman Oblivious PRF with Multiplicative
              Blinding", PKC'21 , March 2021,
              <https://eprint.iacr.org/2021/273>.

   [keyagreement]
              Barker, E., Chen, L., Roginsky, A., Vassilev, A., and R.
              Davis, "Recommendation for pair-wise key-establishment
              schemes using discrete logarithm cryptography", National
              Institute of Standards and Technology report,
              DOI 10.6028/nist.sp.800-56ar3, April 2018,
              <https://doi.org/10.6028/nist.sp.800-56ar3>.

   [RFC8446]  Rescorla, E., "The Transport Layer Security (TLS) Protocol
              Version 1.3", RFC 8446, DOI 10.17487/RFC8446, August 2018,
              <https://datatracker.ietf.org/doc/html/rfc8446>.

Appendix A.  Test Vectors

   This section includes test vectors for the (V)OPRF protocol specified
   in this document.  For each ciphersuite specified in Section 6, there
   is a set of test vectors for the protocol when run in the base mode
   and verifiable mode.  Each test vector lists the batch size for the
   evaluation.  Each test vector value is encoded as a hexadecimal byte
   string.  The label for each test vector value is described below.

   *  "Input": The client input, an opaque byte string.

   *  "Blind": The blind value output by "Blind()", a serialized
      "Scalar" of "Ns" bytes long.

   *  "BlindedElement": The blinded value output by "Blind()", a
      serialized "Element" of "Ne" bytes long.

   *  "EvaluatedElement": The evaluated element output by "Evaluate()",
      a serialized "Element" of "Ne" bytes long.

   *  "EvaluationProofC": The "c" component of the Evaluation proof
      (only listed for verifiable mode test vectors), a serialized
      "Scalar" of "Ns" bytes long.

   *  "EvaluationProofS": The "s" component of the Evaluation proof
      (only listed for verifiable mode test vectors), a serialized
      "Scalar" of "Ns" bytes long.

   *  "Output": The OPRF output, a byte string of length "Nh" bytes.

   Test vectors with batch size B > 1 have inputs separated by a comma
   ",".  Applicable test vectors will have B different values for the
   "Input", "Blind", "BlindedElement", "EvaluationElement", and "Output"
   fields.

   The server key material, "pkSm" and "skSm", are listed under the mode
   for each ciphersuite.  Both "pkSm" and "skSm" are the serialized
   values of "pkS" and "skS", respectively, as used in the protocol.
   Each key pair is derived from a "seed", which is listed as well.

A.1.  OPRF(ristretto255, SHA-512)

A.1.1.  Base Mode

   seed = a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a
   3a3
   skSm = ca8b6aa354a5ab1411b883acd5608a3ab12ac687c93623274bcb579fd6506
   b0c

A.1.1.1.  Test Vector 1, Batch Size 1

   Input = 00
   Blind = c604c785ada70d77a5256ae21767de8c3304115237d262134f5e46e512cf
   8e03
   BlindedElement = a2b0b915f0404735ff6cf21f729e44d37123d0d1f5566e24207
   7866d965d1913
   EvaluationElement = 64f72c596342ab874077e8f98c721468c7332b1dc07a9595
   f22a10875f05762a
   Output = 4be865be03c4f560a641fec1cba70bda79891252c68f4ac65bff70e3f36
   ee63bbd7009f3456f648c6d2944f8691bf6119574694e16bfc8104947d7b41882211
   3

A.1.1.2.  Test Vector 2, Batch Size 1

   Input = 5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a
   Blind = 5ed895206bfc53316d307b23e46ecc6623afb3086da74189a416012be037
   e50b
   BlindedElement = aab54258dcf735c6decabb723ddb12cf50894332f19c503d0b3
   b570a8e845235
   EvaluationElement = 9a404e12c29070fc20943210c78278a1ea13fe59c842261d
   0af113448eb3b747
   Output = c0f6e64639df3ea0ddd3173422aa9170c244db220fedb544091b609e868
   33eada85df7bb19c4add278b1a7c252bd505b9ccb3f1e1cb6d54cb5906eb1ac4c71a
   8

A.1.2.  Verifiable Mode

   seed = a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a
   3a3
   skSm = efd78e96dca2700086d815f1362a496ea5ed287756a8c043dc83479d7b8cf
   907
   pkSm = 6ca010a0a065ba492548a4ca08d0d4aa2f33e584b430bb8879712eb95668c
   b00

A.1.2.1.  Test Vector 1, Batch Size 1

   Input = 00
   Blind = ed8366feb6b1d05d1f46acb727061e43aadfafe9c10e5a64e7518d63e326
   3503
   BlindedElement = 78e6c1988b29ebe31fa04cc8752f0c4192c30574448eeec9025
   1d7e38dd7734d
   EvaluationElement = 9e6acebed23201a06ef66e3d18d5416790f065760e25a615
   f5eff2bd80b2d96d
   EvaluationProofC = 66f11e533994705f7c277713abadc27cb197ee43a3695bfa2
   64d8d17e9bdce0a
   EvaluationProofS = ae69686a4bc810f36332499d26fc15b0d06a057867be7c076
   b0416f1b7bdda03
   Output = b9ed37f840e339872c56ccbe95b5f3bd515418500ad65a30630093a3ecc
   e30b2ad85b9e815cc2056b0c168640e8d87c2ae0e47ed4f61b886bc3a699e2ce9d27
   c

A.1.2.2.  Test Vector 2, Batch Size 1

   Input = 5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a
   Blind = e6d0f1d89ad552e383d6c6f4e8598cc3037d6e274d22da3089e7afbd4171
   ea02
   BlindedElement = f47147746012fdfc198479c70fd6282b21b56373a437c20d6f9
   1dda9caf8fb70
   EvaluationElement = bc1c5d8cbc34f6425feaba643e43078bd88e7e5d7d8f80fe
   167f96a8a3d12713
   EvaluationProofC = ec3e43fa4dd1053fa1d29d649a3b01d3e97176bee79968b9a
   e4a7f93056d490f
   EvaluationProofS = aee114a411955ebeae73977612e415d0ec43753c9e0186370
   245a16e9c3a3b0a
   Output = 8e2e8c97b685f0d425ae8658d798f67293092deb823242a9417ec846a8f
   d7ffac89228b05ace8b65fe759686a1162e00829ef9e803634a296861dcb656f36a3
   4

A.1.2.3.  Test Vector 3, Batch Size 2

   Input = 00,5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a
   Blind = 80513e77795feeec6d2c450589b0e1b178febd5c193a9fcba0d27f0a06e0
   d50f,533c2e6d91c934f919ac218973be55ba0d7b234160a0d4cf3bddafbda99e2e0
   c
   BlindedElement = 3a4d96d627817ea924cafc5a9890a71b1956f722e2b002bf212
   cef3312d1236e,c8af2bec79423cb3d22ea285fe3f2c3a4d0d6cd1c786facf824b24
   9e7089f74d
   EvaluationElement = 8c96598d69347e184d2c5550e8311e8f34d5aa32604d1dc4
   3af62ffc483ae366,249a61269553a2f2af3bc276b019ad8683230ee5900a5b3118c
   f7c6bdae0582d
   EvaluationProofC = 26aef3ce1ad5f4da19bd51490827cb184bf9c943501901bc5
   9d24e19f0b84602
   EvaluationProofS = 450c726f1e3f71068fd319d5a210ab77132613cb1fbc69cf7
   de8df314e9a3309
   Output = b9ed37f840e339872c56ccbe95b5f3bd515418500ad65a30630093a3ecc
   e30b2ad85b9e815cc2056b0c168640e8d87c2ae0e47ed4f61b886bc3a699e2ce9d27
   c,8e2e8c97b685f0d425ae8658d798f67293092deb823242a9417ec846a8fd7ffac8
   9228b05ace8b65fe759686a1162e00829ef9e803634a296861dcb656f36a34

A.2.  OPRF(decaf448, SHAKE-256)

A.2.1.  Base Mode

   seed = a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a
   3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3
   skSm = 1c122faee287c03fe0335709ff5c3ae894afb1af6bc23f2ac29a13aa68517
   2d96eb20c529765b90d7e5729bebed085cff8c4c970a02b5a02

A.2.1.1.  Test Vector 1, Batch Size 1

   Input = 00
   Blind = d1080372f0fcf8c5eace50914e7127f576725f215cc7c111673c635ce668
   bbbb9b50601ad89b358ab8c23ed0b6c9d040365ec9d060868714
   BlindedElement = ae531d67081d88ec2c3d4fa0ada4c19eea7cb14a3028a071128
   5b3c00a828fbae1b5b7b13fbd81fbd629f4765d75d8bfa0d228971f5d4d0e
   EvaluationElement = b05e9027190b8c90e4f0e5d69e1d6244621ae1b99908e26a
   18c1fcb7d7960c1c759df117dbfdb262c9ff03211fc174a56e4c5613caaa766b
   Output = db8e4eb7f13bed68474403da6b6c5d3580328d8d56a5726ee090db873e3
   05534cebc491010f2f4c40409904819d711b0ccb487049a08838f02b09f440e9f677
   4

A.2.1.2.  Test Vector 2, Batch Size 1

   Input = 5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a
   Blind = aed1ffa44fd8f0ed16373606a3cf7df589cca86d8ea1abbf5768771dbef3
   d401c74ae55ba1e28b9565e1e4018eb261a14134a4ce60c1c718
   BlindedElement = eaa242fe3e8696ac173fa96c5314c00ae9fe4312716bbadbd32
   e352db3b33a3faa0f3e295623a4b189c37d0e606c750a31bbccaa744a741d
   EvaluationElement = d2ae6c747fbb053f07a989970d386baf12ad862dfbbc19bc
   d8763c360f00b51795b4ebc01427969ad3beb5f83d1772adc92770abee187ab0
   Output = 36fbf2a529f52189856eb21bda822c15cdc59e67ea2405dfd7bc0eb3377
   10c90ec5247ddb57368e7681704cad3be668b5c78f3e9b7176db5ba7920b3fe69599
   e

A.2.2.  Verifiable Mode

   seed = a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a
   3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3
   skSm = f9054ff1428ab7e433dfe4284e285a46fff7244b6720c252c04399baf0bcf
   37264e30f204e22d55ec68a1a4741d262debcdc6f1967e9b52b
   pkSm = 80c6fe37e3775b9e658606eb63110fc4b6d50788abc6d49b9dc043a6eb696
   a6bc7e968f098ca14437c0c1e14021a08b2c1f1a735d0110b41

A.2.2.1.  Test Vector 1, Batch Size 1

   Input = 00
   Blind = 4c936db1779a621b6c71475ac3111fd5703a59b713929f36dfd1e892a7fe
   814479c93d8b4b6e11d1f6fe5351e51457b665fa7b76074e531f
   BlindedElement = a23f111a3768df2d4740f0b8f0bc3e2d87ed731a81f7a51d59e
   a4ab45b91187b19168e853453f7eb36038b1725a39143fafc26aabb2c4f85
   EvaluationElement = ccec470dc226b6ddc6b4077dedee1863335fda93142a50d8
   4e2ef33f9cc1abe611663c70572bb4909bc3d27436c44f429394fa834fcd20e2
   EvaluationProofC = 1362f3143f97c1f53753cf0122a30777dda4132934424269c
   01888069b0b233a531b9d04b1df60bc569403e66cb941faa238638c4390d01b
   EvaluationProofS = d2ccde80592539257f6b41e1e4b2bfcf91f28ee50cbe28017
   0ec0a802c9a8ab693b770cf3b6a0cddab55887103303045dbbd487fbb696311
   Output = aca8629d596db97e207f5ce5f8b3e52fd3a2f55986b6707aa0100b36946
   5894b67a2f70d8095e1c1ef8d9d483d87d61d12585c0bfa1a8d4e2c0e801ccd4387c
   e

A.2.2.2.  Test Vector 2, Batch Size 1

   Input = 5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a
   Blind = 15b3355179392f40c3d5a15f0d5ffc354e340454ec779f575e4573a3886a
   b5e57e4da2985cea9e32f6d95539ce2c7189e1bd7462e8c5483a
   BlindedElement = 48ee7c9aedc3999d65967bacba285111c770d02596bb729ea5b
   5df0027718e1b3f5043a0e7d9f8b70ccdbac20b7a5b203bf4db7464209f75
   EvaluationElement = 9ca5140dc42dfd087d4137ed7d6ef4c794515f370a6bae50
   25d5f68ce65be6d33ead92dd29ae767194eb1fc18681ae8b0e6b90345fe5ffbf
   EvaluationProofC = a3503e8bf6ba1069a2fa1931e2c8c65a171b8bd3b1251a538
   b12211ea2031e15d6642a4003973164a06c421e2a110f7fe5f498b704f07c0f
   EvaluationProofS = 47946ea50489e414814dc3bf8ef2ded11414b57d0148b0406
   720cc3b19d13523416b83fbb29b82e213f644b9d2309ad5f2316626ef4e273a
   Output = d38127857cade4f852df7b59fd73679f0e52c35df54bc237c574b5224ff
   ec31a0d7d95bb9357c12c58a1a161ce5639fbcb12a90581ff825442ee72f68b388bc
   6

A.2.2.3.  Test Vector 3, Batch Size 2

   Input = 00,5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a
   Blind = 614bb578f29cc677ea9e7aea3e4839413997e020f9377b63c13584156a09
   a46dd2a425c41eac0e313a47e99d05df72c6e1d58e6592577a0d,4c115060bca87db
   7d73e00cbb8559f84cb7a221b235b0950a0ab553f03f10e1386abe954011b7da62bb
   6599418ef90b5d4ea98cc28aff517
   BlindedElement = 22a9bca806348d3dd2cb475a51a6700071ef2ab5c69560d7115
   bb20389e1673c918b9adb18192f702e4fb74f970ef1fdc1271b2863488d3c,669331
   f2214526e77875fb4181d02ec7d223f69e732f39a7b6db4381847accfdf4625bb03e
   cfd096f20f173cae91eb60cc91fc76be53e12b
   EvaluationElement = ee1f71f992bc89cf69ed6c9a289c1f9ccc872aca2819d55d
   a5eed3dac4cb9eecae9804520ac14c09a20cdcf0ee57dd08619733511470f4c8,d03
   c1403dd3b16e6429a8ddcc8c3bca2d15317deb966d4f8d173c19d5f95edd6f1c5170
   f02deb14d466d8a1f855249fd3ad18ef4f2176fa7
   EvaluationProofC = 625acdee93abb326a39d21aff820a960e13c213a82e4392ac
   1f140f4103a26d0d5a78ffbbe963c6bb41213274cc76dd64db8fcdc4092531e
   EvaluationProofS = 1b142b67d4d33f2319fc28816709a8e2b72f35a0895aeafae
   f6c932aa37a468801fe00732b1d6ab4d0d82dd0bcddeec678e999a77d9c2128
   Output = aca8629d596db97e207f5ce5f8b3e52fd3a2f55986b6707aa0100b36946
   5894b67a2f70d8095e1c1ef8d9d483d87d61d12585c0bfa1a8d4e2c0e801ccd4387c
   e,d38127857cade4f852df7b59fd73679f0e52c35df54bc237c574b5224ffec31a0d
   7d95bb9357c12c58a1a161ce5639fbcb12a90581ff825442ee72f68b388bc6

A.3.  OPRF(P-256, SHA-256)

A.3.1.  Base Mode

   seed = a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a
   3a3
   skSm = 815a77cf92f333bdf6869bd9166bf4fb820160e0d9703236ac3e42b0e44b3
   f11

A.3.1.1.  Test Vector 1, Batch Size 1

   Input = 00
   Blind = 5d9e7f6efd3093c32ecceabd57fb03cf760c926d2a7bfa265babf29ec98a
   f0d0
   BlindedElement = 036fe34ec785f565c67188575fb85e45dcae1a01ecd7574839c
   ff353eb3f9bc094
   EvaluationElement = 02185a9448067c7ea4cb566288f52de635c73f85b94adb83
   08e797fb5742c77e92
   Output = 1dd9f4380834ce07f964b4a0e9407df2619403b5c0435e86842d46ff312
   2e43f

A.3.1.2.  Test Vector 2, Batch Size 1

   Input = 5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a
   Blind = 825155ab61f17605af2ae2e935c78d857c9407bcd45128d57d338f1671b5
   fcbe
   BlindedElement = 0357489736f9da62cc104facdb909eb95e5cd556ca4a08b2793
   732f5e3504c2c3c
   EvaluationElement = 03ad96ee687c9a4d57b55f46698c9e2796acc78c05a0d0e2
   2bc30e753f73f03b88
   Output = fe345d391aead5bb83f01f048ba5d901f92271faf9c035d0baf5434a324
   5eb1a

A.3.2.  Verifiable Mode

   seed = a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a
   3a3
   skSm = 029ec0bf2e6153ece839125e15d76a9f054ce2945bfb57e32e39f43c0b5e3
   280
   pkSm = 029667382da3efb1d8df771ec1ca7f0dd598dda9bbd4c79b920c2d1e3dec2
   20885

A.3.2.1.  Test Vector 1, Batch Size 1

   Input = 00
   Blind = cee64d86fd20ab4caa264a26c0e3d42fb773b3173ba76f9588c9b14779bd
   8d91
   BlindedElement = 02b41f164e08371c89bd222c974e88cb6172ba370d8baf3385b
   c94ddee5424bfbe
   EvaluationElement = 03d33c6042831cc0512682ba3a460f708487d41f5730a772
   c6f58051cbcc9ddd00
   EvaluationProofC = 97e25954ef3b32e7dbda9e5682248de0557d05a3aeda68d82
   3da68c00b5ecd81
   EvaluationProofS = 3c3af0c921a130c31514c5a1f67e4894f6cf2c30b89986201
   0bc2082ac1c32dd
   Output = 847440cc811af42db433390156665727cd9d4b77bb5f780247be57b8a4f
   db109

A.3.2.2.  Test Vector 2, Batch Size 1

   Input = 5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a
   Blind = 5c4b401063eff0bf242b4cd534a79bacfc2e715b2db1e7a3ad4ff8af1b24
   daa2
   BlindedElement = 029703a326c304b2c46b6bd5a9c4a0bbbd1be424282eb01759f
   74823f1850d7542
   EvaluationElement = 020c60764bb224f75aa9b0743565c80d02b387710f03a655
   8c0610b3cf2e149d9c
   EvaluationProofC = ab689c74384635f460e973f3fe0f3b7699b978d560b516714
   63a50e479a9c8c8
   EvaluationProofS = 51f91b07ff22e68c22c70b2684df64f7abc0d9aa8cac8298d
   d8d27eba486e71a
   Output = ac42adf5facc79dd1ae9e93581d86fbd7d592a46ceee555008c62436cf8
   5ed61

A.3.2.3.  Test Vector 3, Batch Size 2

   Input = 00,5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a
   Blind = f0c7822ba317fb5e86028c44b92bd3aedcf6744d388ca013ef33edd36930
   4eda,3b9631be9f8b274d9aaf671bfb6a775229bf435021b89c683259773bc686956
   b
   BlindedElement = 03312d163f9d3a2865abbf14fd88a7c4495ad0a31d47a7eccb8
   840078fa0b8cf72,0241673bca26af06f27173856929510521ab70dec3862b7f17cf
   aae2db499e763d
   EvaluationElement = 02f2e480184399670b8180ad3e0033ba9e687de1f72d3e9f
   6b2848a506ad588842,028bd2585e828df05b5172d6cc024c8f111860c27c7446af6
   4466f90cf9ea5fb99
   EvaluationProofC = a75ba68649e6e4c56adad738e5bf449dd2798b187a2999761
   9552b922145b61b
   EvaluationProofS = 60e8e7272d428ce66ef64438f24012124e1b8efecf5900597
   dd25308bdcb7bbc
   Output = 847440cc811af42db433390156665727cd9d4b77bb5f780247be57b8a4f
   db109,ac42adf5facc79dd1ae9e93581d86fbd7d592a46ceee555008c62436cf85ed
   61

A.4.  OPRF(P-384, SHA-512)

A.4.1.  Base Mode

   seed = a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a
   3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3
   skSm = 8d075563c385b0a7fe52fe36cec021c7fd338aa47f672b230b01248362669
   06b3431e2cd99ae52b569707aeb86b7f2d7

A.4.1.1.  Test Vector 1, Batch Size 1

   Input = 00
   Blind = 359073c015b92d15450f7fb395bf52c6ea98384c491fe4e4d423b59de7b0
   df382902c13bdc9993d3717bda68fc080b99
   BlindedElement = 0264775b50549d9e7aa07ecf0ac0dba04068352aeefc2086095
   46cec329f74de77bcdbd84dc6cfcc0064e1fd0cc967e299
   EvaluationElement = 025df8ac4c4d0b3477109263a671f73feaec0f07bbe09c8a
   605a8903b600d95c0efd1e111fa00c343657d91a36d9b42c94
   Output = 1eacc030ccdfd1d8fbc9cac4c794124056a013f6efa3621fc18ab52ddc5
   bb440c63f8146a1db7266e1b04465eca212267f146beb248f551723537b9f6967501
   9

A.4.1.2.  Test Vector 2, Batch Size 1

   Input = 5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a
   Blind = 21ece4f9b6ffd01ce82082545413bd9bb5e8f3c63b86ae88d9ce0530b01c
   b1c23382c7ec9bdd6e75898e4877d8e2bc17
   BlindedElement = 0382fa4dd4ccee8c7acb95d9db71298f830ab6ec16a4e07b411
   6c5800b67e4687af57eb240b4d01b3efa1a0ad67889f3a6
   EvaluationElement = 0234c7bed4271c83d17a399cdaefdd35bff967cdf84fda31
   0eaedb15e2cf4337be68eeba23c80619ed83ab11aa691a51ab
   Output = 569da7a3a183234f2ca5dc54145acd2450189161c93c9e6993fe9a913ba
   dba1d80c5fcae2e6d466757ce294ea5571545b81ed5f80cc11ea7891a97069f26b8e
   4

A.4.2.  Verifiable Mode

   seed = a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a
   3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3
   skSm = 978dd82d645ae675237d855fb6cbb370573fa9e23328859777aaea11e2e25
   eefce619f6d45f2eed992c4ec4660603dd8
   pkSm = 03efdc97c396c9be4912e5171eec99cbf32342316f4e2eb0b955da6fdc9a4
   15299cb13df4f9c8afd9d17e276beee3afc2a

A.4.2.1.  Test Vector 1, Batch Size 1

   Input = 00
   Blind = 102f6338df84c9602bfa9e7d690b1f7a173d07e6d54a419db4a6308f8b09
   589e4283efb9cd1ee4061c6bf884e60a8774
   BlindedElement = 02c986d3031a5d2e89ab88ae8d0a4c95ca35001c038ee7c2200
   b8d2e9629656d5075f3ce290471ebc2929b92e8c2864415
   EvaluationElement = 022f77977e0c48c40e1f5fa4cf4863b50de01deeb9898f73
   7dc487496532d86a195de445af21259f2a3cf2ab9eac53847d
   EvaluationProofC = de697533f92f92c85d443bd976e483b95060ff67f2b9e49ce
   fffa3040f3837d586812796072ad78ac0f771179a51a0dd
   EvaluationProofS = 4c8d434bb423652e3d0dce00f2485b6acb3d0ff4d6317fe31
   10d4208a788ed24b384ce530547ab362a30e65a1dee2ed1
   Output = fbeb018ae74510e4851d0bb7190ad25491ad62f180304c79c5c587c3f4b
   05d4eafcdf03fa1e5c4518f14df71c9b4099e3251a40d59bf687ad971f94211a499a
   c

A.4.2.2.  Test Vector 2, Batch Size 1

   Input = 5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a
   Blind = 8aec1d0c3d16afd032da7ba961449a56cec6fb918e932b06d5778ac7f67b
   ecfb3e3869237f74106241777f230582e84a
   BlindedElement = 0327a0b343334f057293f4099e2b04dc463922267bda9e55772
   30b26fd6c70bd0a406224cd8e3b40240b6d4c28c2438245
   EvaluationElement = 0281b5dace35beb0665cd6413c93025a3bc92ac14b9fff2b
   149f3311c39d827ffaf2d5c0caa7b5d18a5bc5175074c1eeed
   EvaluationProofC = 920c37f3cc5c2aabe0c34c0c10eeffdf7029b31baaa6fb80d
   6962faeb428c53f6c37c62a84ff14fcaa6f5ba6bea6762b
   EvaluationProofS = eb17655a85ba41a9b9742bc3013b8c193608c1b207e779a10
   607f628775659cf927b73b967c300e4eefb280ea366f080
   Output = 9d2ca080f75bd14180e2ef39b172bd4ae5b935d6fcb83871fce36833d41
   90c800460f62f2fe61e497aaa1c7870ef847d804dff38e6fd861d1377abc21a5b1b6
   9

A.4.2.3.  Test Vector 3, Batch Size 2

   Input = 00,5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a
   Blind = 41fabd4722d92472d858051ce9ad1a533176a862c697b2c392aff2aeb77e
   b20c2ae6ba52fe31e13e03bf1d9f39878b23,51171628f1d28bb7402ca4aea6465e2
   67b7f977a1fb71593281099ef2625644aee0b6c5f5e6e01a2b052b3bd4caf539b
   BlindedElement = 02a6738084eef2815492c165396d30eef11988cee9e414c2f94
   4fe923a6b713ad407bba14aa64ce5cdb54fcab2f188d35a,022220c85f60658ea072
   2ad580456f251d3f5c4cdf7bae8e7f53ad7f831ecf17fab90001e1f093f422c88275
   bffdde7a18
   EvaluationElement = 033b46f23ba734f076e75cbe357f7dd9b066814a785138f6
   e8685929bb96001fa40e0c3f3912e9643460d6cbd5c6b38700,03b26f1912318ee31
   2cfa5436c2ba787d0ea049b59874d87a3249f331bc7387b1eb835b184712f56b4d8a
   2312821131a0a
   EvaluationProofC = c8c736682d51b46896f3e6071aa1ad70098aca081def3d450
   886d002ae4b99a29152c187182a49df057cca2387b7515a
   EvaluationProofS = f03df2d149ce09cd2d64a08db2ff8c120a40b31fcae78d493
   6778622d2c028f0ec2552585339ead14c140afab4ee57e0
   Output = fbeb018ae74510e4851d0bb7190ad25491ad62f180304c79c5c587c3f4b
   05d4eafcdf03fa1e5c4518f14df71c9b4099e3251a40d59bf687ad971f94211a499a
   c,9d2ca080f75bd14180e2ef39b172bd4ae5b935d6fcb83871fce36833d4190c8004
   60f62f2fe61e497aaa1c7870ef847d804dff38e6fd861d1377abc21a5b1b69

A.5.  OPRF(P-521, SHA-512)

A.5.1.  Base Mode

   seed = a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a
   3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a
   3a3
   skSm = 004b6d726577fb03f271cc2019225dba2c95c30f3db9ccd3f7c73e72e5b88
   dd414aae248363968cdec91eac95aca69d1bf76cda42213ed965a0218b0c9d4c9e70
   639

A.5.1.1.  Test Vector 1, Batch Size 1

   Input = 00
   Blind = 01b983705fcc9a39607288b935b0797ac6b3c4b2e848823ac9ae16b3a3b5
   816be03432370deb7c3c17d9fc7cb4e0ce646e04e42d638e0fa7a434ed340772a8b5
   d626
   BlindedElement = 030050fc7061af80cb04426077ca987bea12b02e00e3b889b5e
   57d399711d99e2a106083bb018ad9a7bc1207d402280e3ab2ee07551781a7263e931
   608255550d1c0b7
   EvaluationElement = 02003e638c43939c6372833e9cc58ff8f8d1b524c775f2be
   4fee700316e9f16402ca62962d95efbbc17a85d340a811a0a64084c710c0a3e19e3e
   ebb756e790a43e2c69
   Output = 85ef5bc3cc7d6229fd45d276939834e8e78f680b5b9f602ae4a41bfa096
   641621a0cb0ac4afdd09037a4a6d07846855c3124af5a1bdbc4f4345bf0381695710
   1

A.5.1.2.  Test Vector 2, Batch Size 1

   Input = 5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a
   Blind = 01a03b1096b0316bc8567c89bd70267d35c8ddcb2be2cdc867089a2eb5cf
   471b1e6eb4b043b9644c8539857abe3a2022e9c9fd6a1695bbabe8add48bcd149ff3
   b841
   BlindedElement = 0300f0b27a82d48b5f64f48a861c0a9d2387bfeb49e861e3eca
   4e0ce2a2068585db53a00eea5a8925dedd1fdacc5caaa77fd30119eb4aa179704a62
   0f637fa93aa1199
   EvaluationElement = 0200b178d00273ef32bf1fa3725b172908dfe0b0a5449791
   cb692a04934e9c0f92cd7f8bc74e02524eb3ea16ce86a06faf4104cf113a01f6e996
   0f9baf0d786b2dead4
   Output = c690a31df7904a928ddbfd431d4609dd1e81698276d57dfe9dd7334debb
   75dd1153390c19145c54281099a8a18e00172b0cbe19a28501e698f35a30c514b855
   0

A.5.2.  Verifiable Mode

   seed = a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a
   3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a
   3a3
   skSm = 01f26b83346e4b549ede2c8687c06de412cdb70d74574dd8e47711f583474
   c1a0390b51e140b127a2442b3c97ed24c4d5ebc571c95552a31c37885e3d35294243
   343
   pkSm = 0301baa9fe02e50c9919c927a51d33d9a2546d37a61c1d3978c1a8e9370bf
   6ef05670362c54c7a6579f243c9f21e9c27f6ae36c6eb05c5ff7aadd8a5b866a2204
   a6e59

A.5.2.1.  Test Vector 1, Batch Size 1

   Input = 00
   Blind = 00bbb82117c88bbd91b8954e16c0b9ceed3ce992b198be1ebfba9ba970db
   d75beefbfc6d056b7f7ba1ef79f4facbf2d912c26ce2ecc5bb8d66419b379952e96b
   d6f5
   BlindedElement = 0300b44672b938e6d00d8442a32f2187341befd4457db3839b6
   370b08f909a4043cd409b8ae984fc30c22d31782782c7b2d99bda682c330eced0119
   f7e8d1dcc04d203
   EvaluationElement = 0301d5236536b3df5728e70bc572f07a18b9cac7d28532d9
   df5c2230a31c19208fae931734c427b7b25d6f7e6d38788f1cc3bc3e3da4065f3888
   b18e44d0d57ecbbfd9
   EvaluationProofC = 00adfbdee29b391fb413037dbd1649192f8edc84e60732b98
   d0e31c6386afb521227db8a0cced9ea03f9e4c5e65baa0133eb28915fde6e2364c1e
   7545aafdf3123ab
   EvaluationProofS = 00b234bcb10dbb782a530f5a3bc6e6db0d2c65faa5bdba545
   929ab96f06474027c86c3340dbf6cdc7e7f181e0331bf8dc50337afdf119d74b09ea
   87c75f48d6dca07
   Output = b34400c99f49ce09dcb72bff46f5847fe168c7c738cf2887ed101acf9a9
   259f9fc96e33418dbe235075500b5c304d3b553fbd2723610c0a2a1cc2bac5b47983
   7

A.5.2.2.  Test Vector 2, Batch Size 1

   Input = 5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a
   Blind = 009055c99bf9591cb0eab2a72d044c05ca2cc2ef9b609a38546f74b6d688
   f70cf205f782fa11a0d61b2f5a8a2a1143368327f3077c68a1545e9aafbba6a90dc0
   d40a
   BlindedElement = 0201ffd5826ff1d03b6b6067397be6e654e0201ec7e3aec2283
   418dd378b123d476fbc75c75ae1464c6c3df653d0e3809bc0159653eb6389460dddb
   ce519fa99fd6e2f
   EvaluationElement = 02003d8415bbd3f49b19a232d2cacfed1c60683618a25ff9
   761caeb7b3888dc5d98ca9c689b5521897bcefb6eef140d09e1f6c44d38328020b7e
   8eb992a1386e747093
   EvaluationProofC = 00feb087e1b9bd899e866742cc4b572fab2ce21c318bc71b9
   b04bee94ee6c8a3d122f60b8fcd470675244fb6cec9aa1edc90cd7a12b6ff4b8f3a6
   f0f117f3a765940
   EvaluationProofS = 00e36bc40f04e4187d38bbcf27d1605081768adcc3d39fd27
   e117ef6818e527597a8549de0231d71ae95d1221224dcbe758e784d7166294fbc87f
   8dd575865553d05
   Output = 2b5eb016c7dcd66b77826e2da167a69026adfc0927b6a3da869c4c73d3a
   e7873f010ea8f1ad5f9f9a076928839ec25882cab7b66909a1187d9329fef71fd25b
   c

A.5.2.3.  Test Vector 3, Batch Size 2

   Input = 00,5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a
   Blind = 01c6cf092d80c7cf2cb55388d899515238094c800bdd9c65f71780ba85f5
   ae9b4703e17e559ca3ccd1944f9a70536c175f11a827452672b60d4e9f89eba28104
   6e29,00cba1ba1a337759061965a423d9d3d6e1e1006dc8984ad28a4c93ecfc36fc2
   171046b3c4284855cfa2434ed98db9e68a597db2c14728fade716a6a82d600444b26
   e
   BlindedElement = 02002f5e85091d9074df6ec1385b34bf721e97f108dd40ce8fa
   b58ff824df92ef07f44817a7e7393e96af70cf28cc8d989942d262b8ced5b5cc8883
   a997b2c1b605709,02001a712b503cafc256f92400576e0f651febd492d6d79bc8b0
   64b6380131f0e3e02fc244b07ea3ecefb254615a51bb0ff9f5ee278e5298fb6200c5
   428b0f1516732a
   EvaluationElement = 0200013df3966e35f6fe4aebc03556e9129a785b9e9de494
   86a708223995e6d3c1c76e2e3c7d8793a3f13018dffcc39efd4139534cd62b537dd0
   7af3b35e87c8a67137,0201c4930b16d295d32c94f4b86cac9c86fe7c104d7bf6cec
   3206c5cd60c4375ec9c15a34f23005bce90ceaef65ef64a4c5fb79534272fc1d27a1
   82685fdf36829f67d
   EvaluationProofC = 0191a4979b63550a68ca40c114dbfef876ccb7c9cb15b5c37
   cf8aa5cf87b82f3ed54a94ac546ed5871abbdd8ebafce8190c99cef3620d986d2297
   0e4ca511b2f3b08
   EvaluationProofS = 00f5cde39b96027557cd7cc1679c5a49f54bf4954a21ab295
   d52039e99271583761e7fdda23ed2a851b087e1301880ee169bad6366a64307ce837
   d0af2f843f6e950
   Output = b34400c99f49ce09dcb72bff46f5847fe168c7c738cf2887ed101acf9a9
   259f9fc96e33418dbe235075500b5c304d3b553fbd2723610c0a2a1cc2bac5b47983
   7,2b5eb016c7dcd66b77826e2da167a69026adfc0927b6a3da869c4c73d3ae7873f0
   10ea8f1ad5f9f9a076928839ec25882cab7b66909a1187d9329fef71fd25bc

Authors' Addresses

   Alex Davidson
   Brave Software

   Email: alex.davidson92@gmail.com


   Armando Faz-Hernandez
   Cloudflare
   101 Townsend St
   San Francisco,
   United States of America

   Email: armfazh@cloudflare.com


   Nick Sullivan
   Cloudflare
   101 Townsend St
   San Francisco,
   United States of America

   Email: nick@cloudflare.com


   Christopher A. Wood
   Cloudflare
   101 Townsend St
   San Francisco,
   United States of America

   Email: caw@heapingbits.net
